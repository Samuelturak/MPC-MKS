
cv04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004334  08004334  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004334  08004334  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004334  08004334  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800433c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004348  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004348  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009209  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e8  00000000  00000000  0002923d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0002a928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100a8  00000000  00000000  0002b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ba2  00000000  00000000  0003b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f953  00000000  00000000  000452ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a4c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001934  00000000  00000000  000a4c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041c4 	.word	0x080041c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080041c4 	.word	0x080041c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f001 f99b 	bl	8001738 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f001 f905 	bl	8001618 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 fd6c 	bl	8000ef4 <__aeabi_dsub>
 800041c:	f001 f8fc 	bl	8001618 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_ddiv>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	4681      	mov	r9, r0
 800043e:	0005      	movs	r5, r0
 8000440:	030c      	lsls	r4, r1, #12
 8000442:	0048      	lsls	r0, r1, #1
 8000444:	4692      	mov	sl, r2
 8000446:	001f      	movs	r7, r3
 8000448:	b085      	sub	sp, #20
 800044a:	0b24      	lsrs	r4, r4, #12
 800044c:	0d40      	lsrs	r0, r0, #21
 800044e:	0fce      	lsrs	r6, r1, #31
 8000450:	2800      	cmp	r0, #0
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x26>
 8000454:	e156      	b.n	8000704 <__aeabi_ddiv+0x2d4>
 8000456:	4bd4      	ldr	r3, [pc, #848]	; (80007a8 <__aeabi_ddiv+0x378>)
 8000458:	4298      	cmp	r0, r3
 800045a:	d100      	bne.n	800045e <__aeabi_ddiv+0x2e>
 800045c:	e172      	b.n	8000744 <__aeabi_ddiv+0x314>
 800045e:	0f6b      	lsrs	r3, r5, #29
 8000460:	00e4      	lsls	r4, r4, #3
 8000462:	431c      	orrs	r4, r3
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	041b      	lsls	r3, r3, #16
 8000468:	4323      	orrs	r3, r4
 800046a:	4698      	mov	r8, r3
 800046c:	4bcf      	ldr	r3, [pc, #828]	; (80007ac <__aeabi_ddiv+0x37c>)
 800046e:	00ed      	lsls	r5, r5, #3
 8000470:	469b      	mov	fp, r3
 8000472:	2300      	movs	r3, #0
 8000474:	4699      	mov	r9, r3
 8000476:	4483      	add	fp, r0
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	033c      	lsls	r4, r7, #12
 800047c:	007b      	lsls	r3, r7, #1
 800047e:	4650      	mov	r0, sl
 8000480:	0b24      	lsrs	r4, r4, #12
 8000482:	0d5b      	lsrs	r3, r3, #21
 8000484:	0fff      	lsrs	r7, r7, #31
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x5c>
 800048a:	e11f      	b.n	80006cc <__aeabi_ddiv+0x29c>
 800048c:	4ac6      	ldr	r2, [pc, #792]	; (80007a8 <__aeabi_ddiv+0x378>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d100      	bne.n	8000494 <__aeabi_ddiv+0x64>
 8000492:	e162      	b.n	800075a <__aeabi_ddiv+0x32a>
 8000494:	49c5      	ldr	r1, [pc, #788]	; (80007ac <__aeabi_ddiv+0x37c>)
 8000496:	0f42      	lsrs	r2, r0, #29
 8000498:	468c      	mov	ip, r1
 800049a:	00e4      	lsls	r4, r4, #3
 800049c:	4659      	mov	r1, fp
 800049e:	4314      	orrs	r4, r2
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	4463      	add	r3, ip
 80004a4:	0412      	lsls	r2, r2, #16
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	4314      	orrs	r4, r2
 80004aa:	469b      	mov	fp, r3
 80004ac:	00c2      	lsls	r2, r0, #3
 80004ae:	2000      	movs	r0, #0
 80004b0:	0033      	movs	r3, r6
 80004b2:	407b      	eors	r3, r7
 80004b4:	469a      	mov	sl, r3
 80004b6:	464b      	mov	r3, r9
 80004b8:	2b0f      	cmp	r3, #15
 80004ba:	d827      	bhi.n	800050c <__aeabi_ddiv+0xdc>
 80004bc:	49bc      	ldr	r1, [pc, #752]	; (80007b0 <__aeabi_ddiv+0x380>)
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	58cb      	ldr	r3, [r1, r3]
 80004c2:	469f      	mov	pc, r3
 80004c4:	46b2      	mov	sl, r6
 80004c6:	9b00      	ldr	r3, [sp, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d016      	beq.n	80004fa <__aeabi_ddiv+0xca>
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d100      	bne.n	80004d2 <__aeabi_ddiv+0xa2>
 80004d0:	e28e      	b.n	80009f0 <__aeabi_ddiv+0x5c0>
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d000      	beq.n	80004d8 <__aeabi_ddiv+0xa8>
 80004d6:	e0d9      	b.n	800068c <__aeabi_ddiv+0x25c>
 80004d8:	2300      	movs	r3, #0
 80004da:	2400      	movs	r4, #0
 80004dc:	2500      	movs	r5, #0
 80004de:	4652      	mov	r2, sl
 80004e0:	051b      	lsls	r3, r3, #20
 80004e2:	4323      	orrs	r3, r4
 80004e4:	07d2      	lsls	r2, r2, #31
 80004e6:	4313      	orrs	r3, r2
 80004e8:	0028      	movs	r0, r5
 80004ea:	0019      	movs	r1, r3
 80004ec:	b005      	add	sp, #20
 80004ee:	bcf0      	pop	{r4, r5, r6, r7}
 80004f0:	46bb      	mov	fp, r7
 80004f2:	46b2      	mov	sl, r6
 80004f4:	46a9      	mov	r9, r5
 80004f6:	46a0      	mov	r8, r4
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	2400      	movs	r4, #0
 80004fc:	2500      	movs	r5, #0
 80004fe:	4baa      	ldr	r3, [pc, #680]	; (80007a8 <__aeabi_ddiv+0x378>)
 8000500:	e7ed      	b.n	80004de <__aeabi_ddiv+0xae>
 8000502:	46ba      	mov	sl, r7
 8000504:	46a0      	mov	r8, r4
 8000506:	0015      	movs	r5, r2
 8000508:	9000      	str	r0, [sp, #0]
 800050a:	e7dc      	b.n	80004c6 <__aeabi_ddiv+0x96>
 800050c:	4544      	cmp	r4, r8
 800050e:	d200      	bcs.n	8000512 <__aeabi_ddiv+0xe2>
 8000510:	e1c7      	b.n	80008a2 <__aeabi_ddiv+0x472>
 8000512:	d100      	bne.n	8000516 <__aeabi_ddiv+0xe6>
 8000514:	e1c2      	b.n	800089c <__aeabi_ddiv+0x46c>
 8000516:	2301      	movs	r3, #1
 8000518:	425b      	negs	r3, r3
 800051a:	469c      	mov	ip, r3
 800051c:	002e      	movs	r6, r5
 800051e:	4640      	mov	r0, r8
 8000520:	2500      	movs	r5, #0
 8000522:	44e3      	add	fp, ip
 8000524:	0223      	lsls	r3, r4, #8
 8000526:	0e14      	lsrs	r4, r2, #24
 8000528:	431c      	orrs	r4, r3
 800052a:	0c1b      	lsrs	r3, r3, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0423      	lsls	r3, r4, #16
 8000530:	0c1f      	lsrs	r7, r3, #16
 8000532:	0212      	lsls	r2, r2, #8
 8000534:	4649      	mov	r1, r9
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9701      	str	r7, [sp, #4]
 800053a:	f7ff fe6b 	bl	8000214 <__aeabi_uidivmod>
 800053e:	0002      	movs	r2, r0
 8000540:	437a      	muls	r2, r7
 8000542:	040b      	lsls	r3, r1, #16
 8000544:	0c31      	lsrs	r1, r6, #16
 8000546:	4680      	mov	r8, r0
 8000548:	4319      	orrs	r1, r3
 800054a:	428a      	cmp	r2, r1
 800054c:	d907      	bls.n	800055e <__aeabi_ddiv+0x12e>
 800054e:	2301      	movs	r3, #1
 8000550:	425b      	negs	r3, r3
 8000552:	469c      	mov	ip, r3
 8000554:	1909      	adds	r1, r1, r4
 8000556:	44e0      	add	r8, ip
 8000558:	428c      	cmp	r4, r1
 800055a:	d800      	bhi.n	800055e <__aeabi_ddiv+0x12e>
 800055c:	e207      	b.n	800096e <__aeabi_ddiv+0x53e>
 800055e:	1a88      	subs	r0, r1, r2
 8000560:	4649      	mov	r1, r9
 8000562:	f7ff fe57 	bl	8000214 <__aeabi_uidivmod>
 8000566:	0409      	lsls	r1, r1, #16
 8000568:	468c      	mov	ip, r1
 800056a:	0431      	lsls	r1, r6, #16
 800056c:	4666      	mov	r6, ip
 800056e:	9a01      	ldr	r2, [sp, #4]
 8000570:	0c09      	lsrs	r1, r1, #16
 8000572:	4342      	muls	r2, r0
 8000574:	0003      	movs	r3, r0
 8000576:	4331      	orrs	r1, r6
 8000578:	428a      	cmp	r2, r1
 800057a:	d904      	bls.n	8000586 <__aeabi_ddiv+0x156>
 800057c:	1909      	adds	r1, r1, r4
 800057e:	3b01      	subs	r3, #1
 8000580:	428c      	cmp	r4, r1
 8000582:	d800      	bhi.n	8000586 <__aeabi_ddiv+0x156>
 8000584:	e1ed      	b.n	8000962 <__aeabi_ddiv+0x532>
 8000586:	1a88      	subs	r0, r1, r2
 8000588:	4642      	mov	r2, r8
 800058a:	0412      	lsls	r2, r2, #16
 800058c:	431a      	orrs	r2, r3
 800058e:	4690      	mov	r8, r2
 8000590:	4641      	mov	r1, r8
 8000592:	9b00      	ldr	r3, [sp, #0]
 8000594:	040e      	lsls	r6, r1, #16
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	001f      	movs	r7, r3
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	9b00      	ldr	r3, [sp, #0]
 800059e:	0c36      	lsrs	r6, r6, #16
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	0c19      	lsrs	r1, r3, #16
 80005a4:	000b      	movs	r3, r1
 80005a6:	4373      	muls	r3, r6
 80005a8:	0c12      	lsrs	r2, r2, #16
 80005aa:	437e      	muls	r6, r7
 80005ac:	9103      	str	r1, [sp, #12]
 80005ae:	4351      	muls	r1, r2
 80005b0:	437a      	muls	r2, r7
 80005b2:	0c1f      	lsrs	r7, r3, #16
 80005b4:	46bc      	mov	ip, r7
 80005b6:	1876      	adds	r6, r6, r1
 80005b8:	4466      	add	r6, ip
 80005ba:	42b1      	cmp	r1, r6
 80005bc:	d903      	bls.n	80005c6 <__aeabi_ddiv+0x196>
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0249      	lsls	r1, r1, #9
 80005c2:	468c      	mov	ip, r1
 80005c4:	4462      	add	r2, ip
 80005c6:	0c31      	lsrs	r1, r6, #16
 80005c8:	188a      	adds	r2, r1, r2
 80005ca:	0431      	lsls	r1, r6, #16
 80005cc:	041e      	lsls	r6, r3, #16
 80005ce:	0c36      	lsrs	r6, r6, #16
 80005d0:	198e      	adds	r6, r1, r6
 80005d2:	4290      	cmp	r0, r2
 80005d4:	d302      	bcc.n	80005dc <__aeabi_ddiv+0x1ac>
 80005d6:	d112      	bne.n	80005fe <__aeabi_ddiv+0x1ce>
 80005d8:	42b5      	cmp	r5, r6
 80005da:	d210      	bcs.n	80005fe <__aeabi_ddiv+0x1ce>
 80005dc:	4643      	mov	r3, r8
 80005de:	1e59      	subs	r1, r3, #1
 80005e0:	9b00      	ldr	r3, [sp, #0]
 80005e2:	469c      	mov	ip, r3
 80005e4:	4465      	add	r5, ip
 80005e6:	001f      	movs	r7, r3
 80005e8:	429d      	cmp	r5, r3
 80005ea:	419b      	sbcs	r3, r3
 80005ec:	425b      	negs	r3, r3
 80005ee:	191b      	adds	r3, r3, r4
 80005f0:	18c0      	adds	r0, r0, r3
 80005f2:	4284      	cmp	r4, r0
 80005f4:	d200      	bcs.n	80005f8 <__aeabi_ddiv+0x1c8>
 80005f6:	e1a0      	b.n	800093a <__aeabi_ddiv+0x50a>
 80005f8:	d100      	bne.n	80005fc <__aeabi_ddiv+0x1cc>
 80005fa:	e19b      	b.n	8000934 <__aeabi_ddiv+0x504>
 80005fc:	4688      	mov	r8, r1
 80005fe:	1bae      	subs	r6, r5, r6
 8000600:	42b5      	cmp	r5, r6
 8000602:	41ad      	sbcs	r5, r5
 8000604:	1a80      	subs	r0, r0, r2
 8000606:	426d      	negs	r5, r5
 8000608:	1b40      	subs	r0, r0, r5
 800060a:	4284      	cmp	r4, r0
 800060c:	d100      	bne.n	8000610 <__aeabi_ddiv+0x1e0>
 800060e:	e1d5      	b.n	80009bc <__aeabi_ddiv+0x58c>
 8000610:	4649      	mov	r1, r9
 8000612:	f7ff fdff 	bl	8000214 <__aeabi_uidivmod>
 8000616:	9a01      	ldr	r2, [sp, #4]
 8000618:	040b      	lsls	r3, r1, #16
 800061a:	4342      	muls	r2, r0
 800061c:	0c31      	lsrs	r1, r6, #16
 800061e:	0005      	movs	r5, r0
 8000620:	4319      	orrs	r1, r3
 8000622:	428a      	cmp	r2, r1
 8000624:	d900      	bls.n	8000628 <__aeabi_ddiv+0x1f8>
 8000626:	e16c      	b.n	8000902 <__aeabi_ddiv+0x4d2>
 8000628:	1a88      	subs	r0, r1, r2
 800062a:	4649      	mov	r1, r9
 800062c:	f7ff fdf2 	bl	8000214 <__aeabi_uidivmod>
 8000630:	9a01      	ldr	r2, [sp, #4]
 8000632:	0436      	lsls	r6, r6, #16
 8000634:	4342      	muls	r2, r0
 8000636:	0409      	lsls	r1, r1, #16
 8000638:	0c36      	lsrs	r6, r6, #16
 800063a:	0003      	movs	r3, r0
 800063c:	430e      	orrs	r6, r1
 800063e:	42b2      	cmp	r2, r6
 8000640:	d900      	bls.n	8000644 <__aeabi_ddiv+0x214>
 8000642:	e153      	b.n	80008ec <__aeabi_ddiv+0x4bc>
 8000644:	9803      	ldr	r0, [sp, #12]
 8000646:	1ab6      	subs	r6, r6, r2
 8000648:	0002      	movs	r2, r0
 800064a:	042d      	lsls	r5, r5, #16
 800064c:	431d      	orrs	r5, r3
 800064e:	9f02      	ldr	r7, [sp, #8]
 8000650:	042b      	lsls	r3, r5, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	435a      	muls	r2, r3
 8000656:	437b      	muls	r3, r7
 8000658:	469c      	mov	ip, r3
 800065a:	0c29      	lsrs	r1, r5, #16
 800065c:	4348      	muls	r0, r1
 800065e:	0c13      	lsrs	r3, r2, #16
 8000660:	4484      	add	ip, r0
 8000662:	4463      	add	r3, ip
 8000664:	4379      	muls	r1, r7
 8000666:	4298      	cmp	r0, r3
 8000668:	d903      	bls.n	8000672 <__aeabi_ddiv+0x242>
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	0240      	lsls	r0, r0, #9
 800066e:	4684      	mov	ip, r0
 8000670:	4461      	add	r1, ip
 8000672:	0c18      	lsrs	r0, r3, #16
 8000674:	0412      	lsls	r2, r2, #16
 8000676:	041b      	lsls	r3, r3, #16
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	1841      	adds	r1, r0, r1
 800067c:	189b      	adds	r3, r3, r2
 800067e:	428e      	cmp	r6, r1
 8000680:	d200      	bcs.n	8000684 <__aeabi_ddiv+0x254>
 8000682:	e0ff      	b.n	8000884 <__aeabi_ddiv+0x454>
 8000684:	d100      	bne.n	8000688 <__aeabi_ddiv+0x258>
 8000686:	e0fa      	b.n	800087e <__aeabi_ddiv+0x44e>
 8000688:	2301      	movs	r3, #1
 800068a:	431d      	orrs	r5, r3
 800068c:	4a49      	ldr	r2, [pc, #292]	; (80007b4 <__aeabi_ddiv+0x384>)
 800068e:	445a      	add	r2, fp
 8000690:	2a00      	cmp	r2, #0
 8000692:	dc00      	bgt.n	8000696 <__aeabi_ddiv+0x266>
 8000694:	e0aa      	b.n	80007ec <__aeabi_ddiv+0x3bc>
 8000696:	076b      	lsls	r3, r5, #29
 8000698:	d000      	beq.n	800069c <__aeabi_ddiv+0x26c>
 800069a:	e13d      	b.n	8000918 <__aeabi_ddiv+0x4e8>
 800069c:	08ed      	lsrs	r5, r5, #3
 800069e:	4643      	mov	r3, r8
 80006a0:	01db      	lsls	r3, r3, #7
 80006a2:	d506      	bpl.n	80006b2 <__aeabi_ddiv+0x282>
 80006a4:	4642      	mov	r2, r8
 80006a6:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <__aeabi_ddiv+0x388>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	4690      	mov	r8, r2
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	00d2      	lsls	r2, r2, #3
 80006b0:	445a      	add	r2, fp
 80006b2:	4b42      	ldr	r3, [pc, #264]	; (80007bc <__aeabi_ddiv+0x38c>)
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dd00      	ble.n	80006ba <__aeabi_ddiv+0x28a>
 80006b8:	e71f      	b.n	80004fa <__aeabi_ddiv+0xca>
 80006ba:	4643      	mov	r3, r8
 80006bc:	075b      	lsls	r3, r3, #29
 80006be:	431d      	orrs	r5, r3
 80006c0:	4643      	mov	r3, r8
 80006c2:	0552      	lsls	r2, r2, #21
 80006c4:	025c      	lsls	r4, r3, #9
 80006c6:	0b24      	lsrs	r4, r4, #12
 80006c8:	0d53      	lsrs	r3, r2, #21
 80006ca:	e708      	b.n	80004de <__aeabi_ddiv+0xae>
 80006cc:	4652      	mov	r2, sl
 80006ce:	4322      	orrs	r2, r4
 80006d0:	d100      	bne.n	80006d4 <__aeabi_ddiv+0x2a4>
 80006d2:	e07b      	b.n	80007cc <__aeabi_ddiv+0x39c>
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_ddiv+0x2aa>
 80006d8:	e0fa      	b.n	80008d0 <__aeabi_ddiv+0x4a0>
 80006da:	0020      	movs	r0, r4
 80006dc:	f001 f836 	bl	800174c <__clzsi2>
 80006e0:	0002      	movs	r2, r0
 80006e2:	3a0b      	subs	r2, #11
 80006e4:	231d      	movs	r3, #29
 80006e6:	0001      	movs	r1, r0
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	4652      	mov	r2, sl
 80006ec:	3908      	subs	r1, #8
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	408c      	lsls	r4, r1
 80006f2:	4314      	orrs	r4, r2
 80006f4:	4652      	mov	r2, sl
 80006f6:	408a      	lsls	r2, r1
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <__aeabi_ddiv+0x390>)
 80006fa:	4458      	add	r0, fp
 80006fc:	469b      	mov	fp, r3
 80006fe:	4483      	add	fp, r0
 8000700:	2000      	movs	r0, #0
 8000702:	e6d5      	b.n	80004b0 <__aeabi_ddiv+0x80>
 8000704:	464b      	mov	r3, r9
 8000706:	4323      	orrs	r3, r4
 8000708:	4698      	mov	r8, r3
 800070a:	d044      	beq.n	8000796 <__aeabi_ddiv+0x366>
 800070c:	2c00      	cmp	r4, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_ddiv+0x2e2>
 8000710:	e0ce      	b.n	80008b0 <__aeabi_ddiv+0x480>
 8000712:	0020      	movs	r0, r4
 8000714:	f001 f81a 	bl	800174c <__clzsi2>
 8000718:	0001      	movs	r1, r0
 800071a:	0002      	movs	r2, r0
 800071c:	390b      	subs	r1, #11
 800071e:	231d      	movs	r3, #29
 8000720:	1a5b      	subs	r3, r3, r1
 8000722:	4649      	mov	r1, r9
 8000724:	0010      	movs	r0, r2
 8000726:	40d9      	lsrs	r1, r3
 8000728:	3808      	subs	r0, #8
 800072a:	4084      	lsls	r4, r0
 800072c:	000b      	movs	r3, r1
 800072e:	464d      	mov	r5, r9
 8000730:	4323      	orrs	r3, r4
 8000732:	4698      	mov	r8, r3
 8000734:	4085      	lsls	r5, r0
 8000736:	4823      	ldr	r0, [pc, #140]	; (80007c4 <__aeabi_ddiv+0x394>)
 8000738:	1a83      	subs	r3, r0, r2
 800073a:	469b      	mov	fp, r3
 800073c:	2300      	movs	r3, #0
 800073e:	4699      	mov	r9, r3
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	e69a      	b.n	800047a <__aeabi_ddiv+0x4a>
 8000744:	464b      	mov	r3, r9
 8000746:	4323      	orrs	r3, r4
 8000748:	4698      	mov	r8, r3
 800074a:	d11d      	bne.n	8000788 <__aeabi_ddiv+0x358>
 800074c:	2308      	movs	r3, #8
 800074e:	4699      	mov	r9, r3
 8000750:	3b06      	subs	r3, #6
 8000752:	2500      	movs	r5, #0
 8000754:	4683      	mov	fp, r0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	e68f      	b.n	800047a <__aeabi_ddiv+0x4a>
 800075a:	4652      	mov	r2, sl
 800075c:	4322      	orrs	r2, r4
 800075e:	d109      	bne.n	8000774 <__aeabi_ddiv+0x344>
 8000760:	2302      	movs	r3, #2
 8000762:	4649      	mov	r1, r9
 8000764:	4319      	orrs	r1, r3
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <__aeabi_ddiv+0x398>)
 8000768:	4689      	mov	r9, r1
 800076a:	469c      	mov	ip, r3
 800076c:	2400      	movs	r4, #0
 800076e:	2002      	movs	r0, #2
 8000770:	44e3      	add	fp, ip
 8000772:	e69d      	b.n	80004b0 <__aeabi_ddiv+0x80>
 8000774:	2303      	movs	r3, #3
 8000776:	464a      	mov	r2, r9
 8000778:	431a      	orrs	r2, r3
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <__aeabi_ddiv+0x398>)
 800077c:	4691      	mov	r9, r2
 800077e:	469c      	mov	ip, r3
 8000780:	4652      	mov	r2, sl
 8000782:	2003      	movs	r0, #3
 8000784:	44e3      	add	fp, ip
 8000786:	e693      	b.n	80004b0 <__aeabi_ddiv+0x80>
 8000788:	230c      	movs	r3, #12
 800078a:	4699      	mov	r9, r3
 800078c:	3b09      	subs	r3, #9
 800078e:	46a0      	mov	r8, r4
 8000790:	4683      	mov	fp, r0
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	e671      	b.n	800047a <__aeabi_ddiv+0x4a>
 8000796:	2304      	movs	r3, #4
 8000798:	4699      	mov	r9, r3
 800079a:	2300      	movs	r3, #0
 800079c:	469b      	mov	fp, r3
 800079e:	3301      	adds	r3, #1
 80007a0:	2500      	movs	r5, #0
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	e669      	b.n	800047a <__aeabi_ddiv+0x4a>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	000007ff 	.word	0x000007ff
 80007ac:	fffffc01 	.word	0xfffffc01
 80007b0:	080041fc 	.word	0x080041fc
 80007b4:	000003ff 	.word	0x000003ff
 80007b8:	feffffff 	.word	0xfeffffff
 80007bc:	000007fe 	.word	0x000007fe
 80007c0:	000003f3 	.word	0x000003f3
 80007c4:	fffffc0d 	.word	0xfffffc0d
 80007c8:	fffff801 	.word	0xfffff801
 80007cc:	4649      	mov	r1, r9
 80007ce:	2301      	movs	r3, #1
 80007d0:	4319      	orrs	r1, r3
 80007d2:	4689      	mov	r9, r1
 80007d4:	2400      	movs	r4, #0
 80007d6:	2001      	movs	r0, #1
 80007d8:	e66a      	b.n	80004b0 <__aeabi_ddiv+0x80>
 80007da:	2300      	movs	r3, #0
 80007dc:	2480      	movs	r4, #128	; 0x80
 80007de:	469a      	mov	sl, r3
 80007e0:	2500      	movs	r5, #0
 80007e2:	4b8a      	ldr	r3, [pc, #552]	; (8000a0c <__aeabi_ddiv+0x5dc>)
 80007e4:	0324      	lsls	r4, r4, #12
 80007e6:	e67a      	b.n	80004de <__aeabi_ddiv+0xae>
 80007e8:	2501      	movs	r5, #1
 80007ea:	426d      	negs	r5, r5
 80007ec:	2301      	movs	r3, #1
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	2b38      	cmp	r3, #56	; 0x38
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_ddiv+0x3c6>
 80007f4:	e670      	b.n	80004d8 <__aeabi_ddiv+0xa8>
 80007f6:	2b1f      	cmp	r3, #31
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_ddiv+0x3cc>
 80007fa:	e0bf      	b.n	800097c <__aeabi_ddiv+0x54c>
 80007fc:	211f      	movs	r1, #31
 80007fe:	4249      	negs	r1, r1
 8000800:	1a8a      	subs	r2, r1, r2
 8000802:	4641      	mov	r1, r8
 8000804:	40d1      	lsrs	r1, r2
 8000806:	000a      	movs	r2, r1
 8000808:	2b20      	cmp	r3, #32
 800080a:	d004      	beq.n	8000816 <__aeabi_ddiv+0x3e6>
 800080c:	4641      	mov	r1, r8
 800080e:	4b80      	ldr	r3, [pc, #512]	; (8000a10 <__aeabi_ddiv+0x5e0>)
 8000810:	445b      	add	r3, fp
 8000812:	4099      	lsls	r1, r3
 8000814:	430d      	orrs	r5, r1
 8000816:	1e6b      	subs	r3, r5, #1
 8000818:	419d      	sbcs	r5, r3
 800081a:	2307      	movs	r3, #7
 800081c:	432a      	orrs	r2, r5
 800081e:	001d      	movs	r5, r3
 8000820:	2400      	movs	r4, #0
 8000822:	4015      	ands	r5, r2
 8000824:	4213      	tst	r3, r2
 8000826:	d100      	bne.n	800082a <__aeabi_ddiv+0x3fa>
 8000828:	e0d4      	b.n	80009d4 <__aeabi_ddiv+0x5a4>
 800082a:	210f      	movs	r1, #15
 800082c:	2300      	movs	r3, #0
 800082e:	4011      	ands	r1, r2
 8000830:	2904      	cmp	r1, #4
 8000832:	d100      	bne.n	8000836 <__aeabi_ddiv+0x406>
 8000834:	e0cb      	b.n	80009ce <__aeabi_ddiv+0x59e>
 8000836:	1d11      	adds	r1, r2, #4
 8000838:	4291      	cmp	r1, r2
 800083a:	4192      	sbcs	r2, r2
 800083c:	4252      	negs	r2, r2
 800083e:	189b      	adds	r3, r3, r2
 8000840:	000a      	movs	r2, r1
 8000842:	0219      	lsls	r1, r3, #8
 8000844:	d400      	bmi.n	8000848 <__aeabi_ddiv+0x418>
 8000846:	e0c2      	b.n	80009ce <__aeabi_ddiv+0x59e>
 8000848:	2301      	movs	r3, #1
 800084a:	2400      	movs	r4, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e646      	b.n	80004de <__aeabi_ddiv+0xae>
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	4641      	mov	r1, r8
 8000854:	031b      	lsls	r3, r3, #12
 8000856:	4219      	tst	r1, r3
 8000858:	d008      	beq.n	800086c <__aeabi_ddiv+0x43c>
 800085a:	421c      	tst	r4, r3
 800085c:	d106      	bne.n	800086c <__aeabi_ddiv+0x43c>
 800085e:	431c      	orrs	r4, r3
 8000860:	0324      	lsls	r4, r4, #12
 8000862:	46ba      	mov	sl, r7
 8000864:	0015      	movs	r5, r2
 8000866:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <__aeabi_ddiv+0x5dc>)
 8000868:	0b24      	lsrs	r4, r4, #12
 800086a:	e638      	b.n	80004de <__aeabi_ddiv+0xae>
 800086c:	2480      	movs	r4, #128	; 0x80
 800086e:	4643      	mov	r3, r8
 8000870:	0324      	lsls	r4, r4, #12
 8000872:	431c      	orrs	r4, r3
 8000874:	0324      	lsls	r4, r4, #12
 8000876:	46b2      	mov	sl, r6
 8000878:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <__aeabi_ddiv+0x5dc>)
 800087a:	0b24      	lsrs	r4, r4, #12
 800087c:	e62f      	b.n	80004de <__aeabi_ddiv+0xae>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_ddiv+0x454>
 8000882:	e703      	b.n	800068c <__aeabi_ddiv+0x25c>
 8000884:	19a6      	adds	r6, r4, r6
 8000886:	1e68      	subs	r0, r5, #1
 8000888:	42a6      	cmp	r6, r4
 800088a:	d200      	bcs.n	800088e <__aeabi_ddiv+0x45e>
 800088c:	e08d      	b.n	80009aa <__aeabi_ddiv+0x57a>
 800088e:	428e      	cmp	r6, r1
 8000890:	d200      	bcs.n	8000894 <__aeabi_ddiv+0x464>
 8000892:	e0a3      	b.n	80009dc <__aeabi_ddiv+0x5ac>
 8000894:	d100      	bne.n	8000898 <__aeabi_ddiv+0x468>
 8000896:	e0b3      	b.n	8000a00 <__aeabi_ddiv+0x5d0>
 8000898:	0005      	movs	r5, r0
 800089a:	e6f5      	b.n	8000688 <__aeabi_ddiv+0x258>
 800089c:	42aa      	cmp	r2, r5
 800089e:	d900      	bls.n	80008a2 <__aeabi_ddiv+0x472>
 80008a0:	e639      	b.n	8000516 <__aeabi_ddiv+0xe6>
 80008a2:	4643      	mov	r3, r8
 80008a4:	07de      	lsls	r6, r3, #31
 80008a6:	0858      	lsrs	r0, r3, #1
 80008a8:	086b      	lsrs	r3, r5, #1
 80008aa:	431e      	orrs	r6, r3
 80008ac:	07ed      	lsls	r5, r5, #31
 80008ae:	e639      	b.n	8000524 <__aeabi_ddiv+0xf4>
 80008b0:	4648      	mov	r0, r9
 80008b2:	f000 ff4b 	bl	800174c <__clzsi2>
 80008b6:	0001      	movs	r1, r0
 80008b8:	0002      	movs	r2, r0
 80008ba:	3115      	adds	r1, #21
 80008bc:	3220      	adds	r2, #32
 80008be:	291c      	cmp	r1, #28
 80008c0:	dc00      	bgt.n	80008c4 <__aeabi_ddiv+0x494>
 80008c2:	e72c      	b.n	800071e <__aeabi_ddiv+0x2ee>
 80008c4:	464b      	mov	r3, r9
 80008c6:	3808      	subs	r0, #8
 80008c8:	4083      	lsls	r3, r0
 80008ca:	2500      	movs	r5, #0
 80008cc:	4698      	mov	r8, r3
 80008ce:	e732      	b.n	8000736 <__aeabi_ddiv+0x306>
 80008d0:	f000 ff3c 	bl	800174c <__clzsi2>
 80008d4:	0003      	movs	r3, r0
 80008d6:	001a      	movs	r2, r3
 80008d8:	3215      	adds	r2, #21
 80008da:	3020      	adds	r0, #32
 80008dc:	2a1c      	cmp	r2, #28
 80008de:	dc00      	bgt.n	80008e2 <__aeabi_ddiv+0x4b2>
 80008e0:	e700      	b.n	80006e4 <__aeabi_ddiv+0x2b4>
 80008e2:	4654      	mov	r4, sl
 80008e4:	3b08      	subs	r3, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	409c      	lsls	r4, r3
 80008ea:	e705      	b.n	80006f8 <__aeabi_ddiv+0x2c8>
 80008ec:	1936      	adds	r6, r6, r4
 80008ee:	3b01      	subs	r3, #1
 80008f0:	42b4      	cmp	r4, r6
 80008f2:	d900      	bls.n	80008f6 <__aeabi_ddiv+0x4c6>
 80008f4:	e6a6      	b.n	8000644 <__aeabi_ddiv+0x214>
 80008f6:	42b2      	cmp	r2, r6
 80008f8:	d800      	bhi.n	80008fc <__aeabi_ddiv+0x4cc>
 80008fa:	e6a3      	b.n	8000644 <__aeabi_ddiv+0x214>
 80008fc:	1e83      	subs	r3, r0, #2
 80008fe:	1936      	adds	r6, r6, r4
 8000900:	e6a0      	b.n	8000644 <__aeabi_ddiv+0x214>
 8000902:	1909      	adds	r1, r1, r4
 8000904:	3d01      	subs	r5, #1
 8000906:	428c      	cmp	r4, r1
 8000908:	d900      	bls.n	800090c <__aeabi_ddiv+0x4dc>
 800090a:	e68d      	b.n	8000628 <__aeabi_ddiv+0x1f8>
 800090c:	428a      	cmp	r2, r1
 800090e:	d800      	bhi.n	8000912 <__aeabi_ddiv+0x4e2>
 8000910:	e68a      	b.n	8000628 <__aeabi_ddiv+0x1f8>
 8000912:	1e85      	subs	r5, r0, #2
 8000914:	1909      	adds	r1, r1, r4
 8000916:	e687      	b.n	8000628 <__aeabi_ddiv+0x1f8>
 8000918:	230f      	movs	r3, #15
 800091a:	402b      	ands	r3, r5
 800091c:	2b04      	cmp	r3, #4
 800091e:	d100      	bne.n	8000922 <__aeabi_ddiv+0x4f2>
 8000920:	e6bc      	b.n	800069c <__aeabi_ddiv+0x26c>
 8000922:	2305      	movs	r3, #5
 8000924:	425b      	negs	r3, r3
 8000926:	42ab      	cmp	r3, r5
 8000928:	419b      	sbcs	r3, r3
 800092a:	3504      	adds	r5, #4
 800092c:	425b      	negs	r3, r3
 800092e:	08ed      	lsrs	r5, r5, #3
 8000930:	4498      	add	r8, r3
 8000932:	e6b4      	b.n	800069e <__aeabi_ddiv+0x26e>
 8000934:	42af      	cmp	r7, r5
 8000936:	d900      	bls.n	800093a <__aeabi_ddiv+0x50a>
 8000938:	e660      	b.n	80005fc <__aeabi_ddiv+0x1cc>
 800093a:	4282      	cmp	r2, r0
 800093c:	d804      	bhi.n	8000948 <__aeabi_ddiv+0x518>
 800093e:	d000      	beq.n	8000942 <__aeabi_ddiv+0x512>
 8000940:	e65c      	b.n	80005fc <__aeabi_ddiv+0x1cc>
 8000942:	42ae      	cmp	r6, r5
 8000944:	d800      	bhi.n	8000948 <__aeabi_ddiv+0x518>
 8000946:	e659      	b.n	80005fc <__aeabi_ddiv+0x1cc>
 8000948:	2302      	movs	r3, #2
 800094a:	425b      	negs	r3, r3
 800094c:	469c      	mov	ip, r3
 800094e:	9b00      	ldr	r3, [sp, #0]
 8000950:	44e0      	add	r8, ip
 8000952:	469c      	mov	ip, r3
 8000954:	4465      	add	r5, ip
 8000956:	429d      	cmp	r5, r3
 8000958:	419b      	sbcs	r3, r3
 800095a:	425b      	negs	r3, r3
 800095c:	191b      	adds	r3, r3, r4
 800095e:	18c0      	adds	r0, r0, r3
 8000960:	e64d      	b.n	80005fe <__aeabi_ddiv+0x1ce>
 8000962:	428a      	cmp	r2, r1
 8000964:	d800      	bhi.n	8000968 <__aeabi_ddiv+0x538>
 8000966:	e60e      	b.n	8000586 <__aeabi_ddiv+0x156>
 8000968:	1e83      	subs	r3, r0, #2
 800096a:	1909      	adds	r1, r1, r4
 800096c:	e60b      	b.n	8000586 <__aeabi_ddiv+0x156>
 800096e:	428a      	cmp	r2, r1
 8000970:	d800      	bhi.n	8000974 <__aeabi_ddiv+0x544>
 8000972:	e5f4      	b.n	800055e <__aeabi_ddiv+0x12e>
 8000974:	1e83      	subs	r3, r0, #2
 8000976:	4698      	mov	r8, r3
 8000978:	1909      	adds	r1, r1, r4
 800097a:	e5f0      	b.n	800055e <__aeabi_ddiv+0x12e>
 800097c:	4925      	ldr	r1, [pc, #148]	; (8000a14 <__aeabi_ddiv+0x5e4>)
 800097e:	0028      	movs	r0, r5
 8000980:	4459      	add	r1, fp
 8000982:	408d      	lsls	r5, r1
 8000984:	4642      	mov	r2, r8
 8000986:	408a      	lsls	r2, r1
 8000988:	1e69      	subs	r1, r5, #1
 800098a:	418d      	sbcs	r5, r1
 800098c:	4641      	mov	r1, r8
 800098e:	40d8      	lsrs	r0, r3
 8000990:	40d9      	lsrs	r1, r3
 8000992:	4302      	orrs	r2, r0
 8000994:	432a      	orrs	r2, r5
 8000996:	000b      	movs	r3, r1
 8000998:	0751      	lsls	r1, r2, #29
 800099a:	d100      	bne.n	800099e <__aeabi_ddiv+0x56e>
 800099c:	e751      	b.n	8000842 <__aeabi_ddiv+0x412>
 800099e:	210f      	movs	r1, #15
 80009a0:	4011      	ands	r1, r2
 80009a2:	2904      	cmp	r1, #4
 80009a4:	d000      	beq.n	80009a8 <__aeabi_ddiv+0x578>
 80009a6:	e746      	b.n	8000836 <__aeabi_ddiv+0x406>
 80009a8:	e74b      	b.n	8000842 <__aeabi_ddiv+0x412>
 80009aa:	0005      	movs	r5, r0
 80009ac:	428e      	cmp	r6, r1
 80009ae:	d000      	beq.n	80009b2 <__aeabi_ddiv+0x582>
 80009b0:	e66a      	b.n	8000688 <__aeabi_ddiv+0x258>
 80009b2:	9a00      	ldr	r2, [sp, #0]
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d000      	beq.n	80009ba <__aeabi_ddiv+0x58a>
 80009b8:	e666      	b.n	8000688 <__aeabi_ddiv+0x258>
 80009ba:	e667      	b.n	800068c <__aeabi_ddiv+0x25c>
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <__aeabi_ddiv+0x5e8>)
 80009be:	445a      	add	r2, fp
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_ddiv+0x596>
 80009c4:	e710      	b.n	80007e8 <__aeabi_ddiv+0x3b8>
 80009c6:	2301      	movs	r3, #1
 80009c8:	2500      	movs	r5, #0
 80009ca:	4498      	add	r8, r3
 80009cc:	e667      	b.n	800069e <__aeabi_ddiv+0x26e>
 80009ce:	075d      	lsls	r5, r3, #29
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	0b1c      	lsrs	r4, r3, #12
 80009d4:	08d2      	lsrs	r2, r2, #3
 80009d6:	2300      	movs	r3, #0
 80009d8:	4315      	orrs	r5, r2
 80009da:	e580      	b.n	80004de <__aeabi_ddiv+0xae>
 80009dc:	9800      	ldr	r0, [sp, #0]
 80009de:	3d02      	subs	r5, #2
 80009e0:	0042      	lsls	r2, r0, #1
 80009e2:	4282      	cmp	r2, r0
 80009e4:	41bf      	sbcs	r7, r7
 80009e6:	427f      	negs	r7, r7
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	1936      	adds	r6, r6, r4
 80009ec:	9200      	str	r2, [sp, #0]
 80009ee:	e7dd      	b.n	80009ac <__aeabi_ddiv+0x57c>
 80009f0:	2480      	movs	r4, #128	; 0x80
 80009f2:	4643      	mov	r3, r8
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	431c      	orrs	r4, r3
 80009f8:	0324      	lsls	r4, r4, #12
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__aeabi_ddiv+0x5dc>)
 80009fc:	0b24      	lsrs	r4, r4, #12
 80009fe:	e56e      	b.n	80004de <__aeabi_ddiv+0xae>
 8000a00:	9a00      	ldr	r2, [sp, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3ea      	bcc.n	80009dc <__aeabi_ddiv+0x5ac>
 8000a06:	0005      	movs	r5, r0
 8000a08:	e7d3      	b.n	80009b2 <__aeabi_ddiv+0x582>
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	0000043e 	.word	0x0000043e
 8000a14:	0000041e 	.word	0x0000041e
 8000a18:	000003ff 	.word	0x000003ff

08000a1c <__aeabi_dmul>:
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	4657      	mov	r7, sl
 8000a20:	464e      	mov	r6, r9
 8000a22:	4645      	mov	r5, r8
 8000a24:	46de      	mov	lr, fp
 8000a26:	b5e0      	push	{r5, r6, r7, lr}
 8000a28:	4698      	mov	r8, r3
 8000a2a:	030c      	lsls	r4, r1, #12
 8000a2c:	004b      	lsls	r3, r1, #1
 8000a2e:	0006      	movs	r6, r0
 8000a30:	4692      	mov	sl, r2
 8000a32:	b087      	sub	sp, #28
 8000a34:	0b24      	lsrs	r4, r4, #12
 8000a36:	0d5b      	lsrs	r3, r3, #21
 8000a38:	0fcf      	lsrs	r7, r1, #31
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dmul+0x24>
 8000a3e:	e15c      	b.n	8000cfa <__aeabi_dmul+0x2de>
 8000a40:	4ad9      	ldr	r2, [pc, #868]	; (8000da8 <__aeabi_dmul+0x38c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dmul+0x2c>
 8000a46:	e175      	b.n	8000d34 <__aeabi_dmul+0x318>
 8000a48:	0f42      	lsrs	r2, r0, #29
 8000a4a:	00e4      	lsls	r4, r4, #3
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0412      	lsls	r2, r2, #16
 8000a52:	4314      	orrs	r4, r2
 8000a54:	4ad5      	ldr	r2, [pc, #852]	; (8000dac <__aeabi_dmul+0x390>)
 8000a56:	00c5      	lsls	r5, r0, #3
 8000a58:	4694      	mov	ip, r2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	4699      	mov	r9, r3
 8000a62:	469b      	mov	fp, r3
 8000a64:	4643      	mov	r3, r8
 8000a66:	4642      	mov	r2, r8
 8000a68:	031e      	lsls	r6, r3, #12
 8000a6a:	0fd2      	lsrs	r2, r2, #31
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4650      	mov	r0, sl
 8000a70:	4690      	mov	r8, r2
 8000a72:	0b36      	lsrs	r6, r6, #12
 8000a74:	0d5b      	lsrs	r3, r3, #21
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dmul+0x5e>
 8000a78:	e120      	b.n	8000cbc <__aeabi_dmul+0x2a0>
 8000a7a:	4acb      	ldr	r2, [pc, #812]	; (8000da8 <__aeabi_dmul+0x38c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dmul+0x66>
 8000a80:	e162      	b.n	8000d48 <__aeabi_dmul+0x32c>
 8000a82:	49ca      	ldr	r1, [pc, #808]	; (8000dac <__aeabi_dmul+0x390>)
 8000a84:	0f42      	lsrs	r2, r0, #29
 8000a86:	468c      	mov	ip, r1
 8000a88:	9900      	ldr	r1, [sp, #0]
 8000a8a:	4463      	add	r3, ip
 8000a8c:	00f6      	lsls	r6, r6, #3
 8000a8e:	468c      	mov	ip, r1
 8000a90:	4316      	orrs	r6, r2
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	449c      	add	ip, r3
 8000a96:	0412      	lsls	r2, r2, #16
 8000a98:	4663      	mov	r3, ip
 8000a9a:	4316      	orrs	r6, r2
 8000a9c:	00c2      	lsls	r2, r0, #3
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	9900      	ldr	r1, [sp, #0]
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	3101      	adds	r1, #1
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	4649      	mov	r1, r9
 8000aac:	407b      	eors	r3, r7
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	290f      	cmp	r1, #15
 8000ab2:	d826      	bhi.n	8000b02 <__aeabi_dmul+0xe6>
 8000ab4:	4bbe      	ldr	r3, [pc, #760]	; (8000db0 <__aeabi_dmul+0x394>)
 8000ab6:	0089      	lsls	r1, r1, #2
 8000ab8:	5859      	ldr	r1, [r3, r1]
 8000aba:	468f      	mov	pc, r1
 8000abc:	4643      	mov	r3, r8
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	0034      	movs	r4, r6
 8000ac2:	0015      	movs	r5, r2
 8000ac4:	4683      	mov	fp, r0
 8000ac6:	465b      	mov	r3, fp
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d016      	beq.n	8000afa <__aeabi_dmul+0xde>
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dmul+0xb6>
 8000ad0:	e203      	b.n	8000eda <__aeabi_dmul+0x4be>
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_dmul+0xbc>
 8000ad6:	e0cd      	b.n	8000c74 <__aeabi_dmul+0x258>
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2400      	movs	r4, #0
 8000adc:	2500      	movs	r5, #0
 8000ade:	9b01      	ldr	r3, [sp, #4]
 8000ae0:	0512      	lsls	r2, r2, #20
 8000ae2:	4322      	orrs	r2, r4
 8000ae4:	07db      	lsls	r3, r3, #31
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	0028      	movs	r0, r5
 8000aea:	0011      	movs	r1, r2
 8000aec:	b007      	add	sp, #28
 8000aee:	bcf0      	pop	{r4, r5, r6, r7}
 8000af0:	46bb      	mov	fp, r7
 8000af2:	46b2      	mov	sl, r6
 8000af4:	46a9      	mov	r9, r5
 8000af6:	46a0      	mov	r8, r4
 8000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afa:	2400      	movs	r4, #0
 8000afc:	2500      	movs	r5, #0
 8000afe:	4aaa      	ldr	r2, [pc, #680]	; (8000da8 <__aeabi_dmul+0x38c>)
 8000b00:	e7ed      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000b02:	0c28      	lsrs	r0, r5, #16
 8000b04:	042d      	lsls	r5, r5, #16
 8000b06:	0c2d      	lsrs	r5, r5, #16
 8000b08:	002b      	movs	r3, r5
 8000b0a:	0c11      	lsrs	r1, r2, #16
 8000b0c:	0412      	lsls	r2, r2, #16
 8000b0e:	0c12      	lsrs	r2, r2, #16
 8000b10:	4353      	muls	r3, r2
 8000b12:	4698      	mov	r8, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	002f      	movs	r7, r5
 8000b18:	4343      	muls	r3, r0
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	434f      	muls	r7, r1
 8000b1e:	444f      	add	r7, r9
 8000b20:	46bb      	mov	fp, r7
 8000b22:	4647      	mov	r7, r8
 8000b24:	000b      	movs	r3, r1
 8000b26:	0c3f      	lsrs	r7, r7, #16
 8000b28:	46ba      	mov	sl, r7
 8000b2a:	4343      	muls	r3, r0
 8000b2c:	44da      	add	sl, fp
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	45d1      	cmp	r9, sl
 8000b32:	d904      	bls.n	8000b3e <__aeabi_dmul+0x122>
 8000b34:	2780      	movs	r7, #128	; 0x80
 8000b36:	027f      	lsls	r7, r7, #9
 8000b38:	46b9      	mov	r9, r7
 8000b3a:	444b      	add	r3, r9
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	4653      	mov	r3, sl
 8000b40:	0c1b      	lsrs	r3, r3, #16
 8000b42:	469b      	mov	fp, r3
 8000b44:	4653      	mov	r3, sl
 8000b46:	041f      	lsls	r7, r3, #16
 8000b48:	4643      	mov	r3, r8
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	0c1b      	lsrs	r3, r3, #16
 8000b4e:	4698      	mov	r8, r3
 8000b50:	003b      	movs	r3, r7
 8000b52:	4443      	add	r3, r8
 8000b54:	9304      	str	r3, [sp, #16]
 8000b56:	0c33      	lsrs	r3, r6, #16
 8000b58:	0436      	lsls	r6, r6, #16
 8000b5a:	0c36      	lsrs	r6, r6, #16
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	0033      	movs	r3, r6
 8000b60:	4343      	muls	r3, r0
 8000b62:	4699      	mov	r9, r3
 8000b64:	4643      	mov	r3, r8
 8000b66:	4343      	muls	r3, r0
 8000b68:	002f      	movs	r7, r5
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	4643      	mov	r3, r8
 8000b6e:	4377      	muls	r7, r6
 8000b70:	435d      	muls	r5, r3
 8000b72:	0c38      	lsrs	r0, r7, #16
 8000b74:	444d      	add	r5, r9
 8000b76:	1945      	adds	r5, r0, r5
 8000b78:	45a9      	cmp	r9, r5
 8000b7a:	d903      	bls.n	8000b84 <__aeabi_dmul+0x168>
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	025b      	lsls	r3, r3, #9
 8000b80:	4699      	mov	r9, r3
 8000b82:	44ca      	add	sl, r9
 8000b84:	043f      	lsls	r7, r7, #16
 8000b86:	0c28      	lsrs	r0, r5, #16
 8000b88:	0c3f      	lsrs	r7, r7, #16
 8000b8a:	042d      	lsls	r5, r5, #16
 8000b8c:	19ed      	adds	r5, r5, r7
 8000b8e:	0c27      	lsrs	r7, r4, #16
 8000b90:	0424      	lsls	r4, r4, #16
 8000b92:	0c24      	lsrs	r4, r4, #16
 8000b94:	0003      	movs	r3, r0
 8000b96:	0020      	movs	r0, r4
 8000b98:	4350      	muls	r0, r2
 8000b9a:	437a      	muls	r2, r7
 8000b9c:	4691      	mov	r9, r2
 8000b9e:	003a      	movs	r2, r7
 8000ba0:	4453      	add	r3, sl
 8000ba2:	9305      	str	r3, [sp, #20]
 8000ba4:	0c03      	lsrs	r3, r0, #16
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	434a      	muls	r2, r1
 8000baa:	4361      	muls	r1, r4
 8000bac:	4449      	add	r1, r9
 8000bae:	4451      	add	r1, sl
 8000bb0:	44ab      	add	fp, r5
 8000bb2:	4589      	cmp	r9, r1
 8000bb4:	d903      	bls.n	8000bbe <__aeabi_dmul+0x1a2>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	025b      	lsls	r3, r3, #9
 8000bba:	4699      	mov	r9, r3
 8000bbc:	444a      	add	r2, r9
 8000bbe:	0400      	lsls	r0, r0, #16
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	0c00      	lsrs	r0, r0, #16
 8000bc4:	0409      	lsls	r1, r1, #16
 8000bc6:	1809      	adds	r1, r1, r0
 8000bc8:	0020      	movs	r0, r4
 8000bca:	4699      	mov	r9, r3
 8000bcc:	4643      	mov	r3, r8
 8000bce:	4370      	muls	r0, r6
 8000bd0:	435c      	muls	r4, r3
 8000bd2:	437e      	muls	r6, r7
 8000bd4:	435f      	muls	r7, r3
 8000bd6:	0c03      	lsrs	r3, r0, #16
 8000bd8:	4698      	mov	r8, r3
 8000bda:	19a4      	adds	r4, r4, r6
 8000bdc:	4444      	add	r4, r8
 8000bde:	444a      	add	r2, r9
 8000be0:	9703      	str	r7, [sp, #12]
 8000be2:	42a6      	cmp	r6, r4
 8000be4:	d904      	bls.n	8000bf0 <__aeabi_dmul+0x1d4>
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	025b      	lsls	r3, r3, #9
 8000bea:	4698      	mov	r8, r3
 8000bec:	4447      	add	r7, r8
 8000bee:	9703      	str	r7, [sp, #12]
 8000bf0:	0423      	lsls	r3, r4, #16
 8000bf2:	9e02      	ldr	r6, [sp, #8]
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	9b05      	ldr	r3, [sp, #20]
 8000bf8:	445e      	add	r6, fp
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	42ae      	cmp	r6, r5
 8000bfe:	41ad      	sbcs	r5, r5
 8000c00:	1876      	adds	r6, r6, r1
 8000c02:	428e      	cmp	r6, r1
 8000c04:	4189      	sbcs	r1, r1
 8000c06:	0400      	lsls	r0, r0, #16
 8000c08:	0c00      	lsrs	r0, r0, #16
 8000c0a:	4450      	add	r0, sl
 8000c0c:	4440      	add	r0, r8
 8000c0e:	426d      	negs	r5, r5
 8000c10:	1947      	adds	r7, r0, r5
 8000c12:	46b8      	mov	r8, r7
 8000c14:	4693      	mov	fp, r2
 8000c16:	4249      	negs	r1, r1
 8000c18:	4689      	mov	r9, r1
 8000c1a:	44c3      	add	fp, r8
 8000c1c:	44d9      	add	r9, fp
 8000c1e:	4298      	cmp	r0, r3
 8000c20:	4180      	sbcs	r0, r0
 8000c22:	45a8      	cmp	r8, r5
 8000c24:	41ad      	sbcs	r5, r5
 8000c26:	4593      	cmp	fp, r2
 8000c28:	4192      	sbcs	r2, r2
 8000c2a:	4589      	cmp	r9, r1
 8000c2c:	4189      	sbcs	r1, r1
 8000c2e:	426d      	negs	r5, r5
 8000c30:	4240      	negs	r0, r0
 8000c32:	4328      	orrs	r0, r5
 8000c34:	0c24      	lsrs	r4, r4, #16
 8000c36:	4252      	negs	r2, r2
 8000c38:	4249      	negs	r1, r1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	1900      	adds	r0, r0, r4
 8000c40:	1880      	adds	r0, r0, r2
 8000c42:	18c7      	adds	r7, r0, r3
 8000c44:	464b      	mov	r3, r9
 8000c46:	0ddc      	lsrs	r4, r3, #23
 8000c48:	9b04      	ldr	r3, [sp, #16]
 8000c4a:	0275      	lsls	r5, r6, #9
 8000c4c:	431d      	orrs	r5, r3
 8000c4e:	1e6a      	subs	r2, r5, #1
 8000c50:	4195      	sbcs	r5, r2
 8000c52:	464b      	mov	r3, r9
 8000c54:	0df6      	lsrs	r6, r6, #23
 8000c56:	027f      	lsls	r7, r7, #9
 8000c58:	4335      	orrs	r5, r6
 8000c5a:	025a      	lsls	r2, r3, #9
 8000c5c:	433c      	orrs	r4, r7
 8000c5e:	4315      	orrs	r5, r2
 8000c60:	01fb      	lsls	r3, r7, #7
 8000c62:	d400      	bmi.n	8000c66 <__aeabi_dmul+0x24a>
 8000c64:	e11c      	b.n	8000ea0 <__aeabi_dmul+0x484>
 8000c66:	2101      	movs	r1, #1
 8000c68:	086a      	lsrs	r2, r5, #1
 8000c6a:	400d      	ands	r5, r1
 8000c6c:	4315      	orrs	r5, r2
 8000c6e:	07e2      	lsls	r2, r4, #31
 8000c70:	4315      	orrs	r5, r2
 8000c72:	0864      	lsrs	r4, r4, #1
 8000c74:	494f      	ldr	r1, [pc, #316]	; (8000db4 <__aeabi_dmul+0x398>)
 8000c76:	4461      	add	r1, ip
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dmul+0x262>
 8000c7c:	e0b0      	b.n	8000de0 <__aeabi_dmul+0x3c4>
 8000c7e:	076b      	lsls	r3, r5, #29
 8000c80:	d009      	beq.n	8000c96 <__aeabi_dmul+0x27a>
 8000c82:	220f      	movs	r2, #15
 8000c84:	402a      	ands	r2, r5
 8000c86:	2a04      	cmp	r2, #4
 8000c88:	d005      	beq.n	8000c96 <__aeabi_dmul+0x27a>
 8000c8a:	1d2a      	adds	r2, r5, #4
 8000c8c:	42aa      	cmp	r2, r5
 8000c8e:	41ad      	sbcs	r5, r5
 8000c90:	426d      	negs	r5, r5
 8000c92:	1964      	adds	r4, r4, r5
 8000c94:	0015      	movs	r5, r2
 8000c96:	01e3      	lsls	r3, r4, #7
 8000c98:	d504      	bpl.n	8000ca4 <__aeabi_dmul+0x288>
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4a46      	ldr	r2, [pc, #280]	; (8000db8 <__aeabi_dmul+0x39c>)
 8000c9e:	00c9      	lsls	r1, r1, #3
 8000ca0:	4014      	ands	r4, r2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	4a45      	ldr	r2, [pc, #276]	; (8000dbc <__aeabi_dmul+0x3a0>)
 8000ca6:	4291      	cmp	r1, r2
 8000ca8:	dd00      	ble.n	8000cac <__aeabi_dmul+0x290>
 8000caa:	e726      	b.n	8000afa <__aeabi_dmul+0xde>
 8000cac:	0762      	lsls	r2, r4, #29
 8000cae:	08ed      	lsrs	r5, r5, #3
 8000cb0:	0264      	lsls	r4, r4, #9
 8000cb2:	0549      	lsls	r1, r1, #21
 8000cb4:	4315      	orrs	r5, r2
 8000cb6:	0b24      	lsrs	r4, r4, #12
 8000cb8:	0d4a      	lsrs	r2, r1, #21
 8000cba:	e710      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000cbc:	4652      	mov	r2, sl
 8000cbe:	4332      	orrs	r2, r6
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dmul+0x2a8>
 8000cc2:	e07f      	b.n	8000dc4 <__aeabi_dmul+0x3a8>
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dmul+0x2ae>
 8000cc8:	e0dc      	b.n	8000e84 <__aeabi_dmul+0x468>
 8000cca:	0030      	movs	r0, r6
 8000ccc:	f000 fd3e 	bl	800174c <__clzsi2>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	3a0b      	subs	r2, #11
 8000cd4:	231d      	movs	r3, #29
 8000cd6:	0001      	movs	r1, r0
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	4652      	mov	r2, sl
 8000cdc:	3908      	subs	r1, #8
 8000cde:	40da      	lsrs	r2, r3
 8000ce0:	408e      	lsls	r6, r1
 8000ce2:	4316      	orrs	r6, r2
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	408a      	lsls	r2, r1
 8000ce8:	9b00      	ldr	r3, [sp, #0]
 8000cea:	4935      	ldr	r1, [pc, #212]	; (8000dc0 <__aeabi_dmul+0x3a4>)
 8000cec:	1a18      	subs	r0, r3, r0
 8000cee:	0003      	movs	r3, r0
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	4463      	add	r3, ip
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	e6d3      	b.n	8000aa2 <__aeabi_dmul+0x86>
 8000cfa:	0025      	movs	r5, r4
 8000cfc:	4305      	orrs	r5, r0
 8000cfe:	d04a      	beq.n	8000d96 <__aeabi_dmul+0x37a>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dmul+0x2ea>
 8000d04:	e0b0      	b.n	8000e68 <__aeabi_dmul+0x44c>
 8000d06:	0020      	movs	r0, r4
 8000d08:	f000 fd20 	bl	800174c <__clzsi2>
 8000d0c:	0001      	movs	r1, r0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	390b      	subs	r1, #11
 8000d12:	231d      	movs	r3, #29
 8000d14:	0010      	movs	r0, r2
 8000d16:	1a5b      	subs	r3, r3, r1
 8000d18:	0031      	movs	r1, r6
 8000d1a:	0035      	movs	r5, r6
 8000d1c:	3808      	subs	r0, #8
 8000d1e:	4084      	lsls	r4, r0
 8000d20:	40d9      	lsrs	r1, r3
 8000d22:	4085      	lsls	r5, r0
 8000d24:	430c      	orrs	r4, r1
 8000d26:	4826      	ldr	r0, [pc, #152]	; (8000dc0 <__aeabi_dmul+0x3a4>)
 8000d28:	1a83      	subs	r3, r0, r2
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4699      	mov	r9, r3
 8000d30:	469b      	mov	fp, r3
 8000d32:	e697      	b.n	8000a64 <__aeabi_dmul+0x48>
 8000d34:	0005      	movs	r5, r0
 8000d36:	4325      	orrs	r5, r4
 8000d38:	d126      	bne.n	8000d88 <__aeabi_dmul+0x36c>
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	2400      	movs	r4, #0
 8000d42:	4691      	mov	r9, r2
 8000d44:	469b      	mov	fp, r3
 8000d46:	e68d      	b.n	8000a64 <__aeabi_dmul+0x48>
 8000d48:	4652      	mov	r2, sl
 8000d4a:	9b00      	ldr	r3, [sp, #0]
 8000d4c:	4332      	orrs	r2, r6
 8000d4e:	d110      	bne.n	8000d72 <__aeabi_dmul+0x356>
 8000d50:	4915      	ldr	r1, [pc, #84]	; (8000da8 <__aeabi_dmul+0x38c>)
 8000d52:	2600      	movs	r6, #0
 8000d54:	468c      	mov	ip, r1
 8000d56:	4463      	add	r3, ip
 8000d58:	4649      	mov	r1, r9
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	4319      	orrs	r1, r3
 8000d60:	4689      	mov	r9, r1
 8000d62:	2002      	movs	r0, #2
 8000d64:	e69d      	b.n	8000aa2 <__aeabi_dmul+0x86>
 8000d66:	465b      	mov	r3, fp
 8000d68:	9701      	str	r7, [sp, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_dmul+0x354>
 8000d6e:	e6ad      	b.n	8000acc <__aeabi_dmul+0xb0>
 8000d70:	e6c3      	b.n	8000afa <__aeabi_dmul+0xde>
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <__aeabi_dmul+0x38c>)
 8000d74:	2003      	movs	r0, #3
 8000d76:	4694      	mov	ip, r2
 8000d78:	4463      	add	r3, ip
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2303      	movs	r3, #3
 8000d80:	431a      	orrs	r2, r3
 8000d82:	4691      	mov	r9, r2
 8000d84:	4652      	mov	r2, sl
 8000d86:	e68c      	b.n	8000aa2 <__aeabi_dmul+0x86>
 8000d88:	220c      	movs	r2, #12
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	0005      	movs	r5, r0
 8000d90:	4691      	mov	r9, r2
 8000d92:	469b      	mov	fp, r3
 8000d94:	e666      	b.n	8000a64 <__aeabi_dmul+0x48>
 8000d96:	2304      	movs	r3, #4
 8000d98:	4699      	mov	r9, r3
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	2400      	movs	r4, #0
 8000da2:	469b      	mov	fp, r3
 8000da4:	e65e      	b.n	8000a64 <__aeabi_dmul+0x48>
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	000007ff 	.word	0x000007ff
 8000dac:	fffffc01 	.word	0xfffffc01
 8000db0:	0800423c 	.word	0x0800423c
 8000db4:	000003ff 	.word	0x000003ff
 8000db8:	feffffff 	.word	0xfeffffff
 8000dbc:	000007fe 	.word	0x000007fe
 8000dc0:	fffffc0d 	.word	0xfffffc0d
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	4319      	orrs	r1, r3
 8000dca:	4689      	mov	r9, r1
 8000dcc:	2600      	movs	r6, #0
 8000dce:	2001      	movs	r0, #1
 8000dd0:	e667      	b.n	8000aa2 <__aeabi_dmul+0x86>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2480      	movs	r4, #128	; 0x80
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	4a43      	ldr	r2, [pc, #268]	; (8000ee8 <__aeabi_dmul+0x4cc>)
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	0324      	lsls	r4, r4, #12
 8000dde:	e67e      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000de0:	2001      	movs	r0, #1
 8000de2:	1a40      	subs	r0, r0, r1
 8000de4:	2838      	cmp	r0, #56	; 0x38
 8000de6:	dd00      	ble.n	8000dea <__aeabi_dmul+0x3ce>
 8000de8:	e676      	b.n	8000ad8 <__aeabi_dmul+0xbc>
 8000dea:	281f      	cmp	r0, #31
 8000dec:	dd5b      	ble.n	8000ea6 <__aeabi_dmul+0x48a>
 8000dee:	221f      	movs	r2, #31
 8000df0:	0023      	movs	r3, r4
 8000df2:	4252      	negs	r2, r2
 8000df4:	1a51      	subs	r1, r2, r1
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	0019      	movs	r1, r3
 8000dfa:	2820      	cmp	r0, #32
 8000dfc:	d003      	beq.n	8000e06 <__aeabi_dmul+0x3ea>
 8000dfe:	4a3b      	ldr	r2, [pc, #236]	; (8000eec <__aeabi_dmul+0x4d0>)
 8000e00:	4462      	add	r2, ip
 8000e02:	4094      	lsls	r4, r2
 8000e04:	4325      	orrs	r5, r4
 8000e06:	1e6a      	subs	r2, r5, #1
 8000e08:	4195      	sbcs	r5, r2
 8000e0a:	002a      	movs	r2, r5
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	2107      	movs	r1, #7
 8000e10:	000d      	movs	r5, r1
 8000e12:	2400      	movs	r4, #0
 8000e14:	4015      	ands	r5, r2
 8000e16:	4211      	tst	r1, r2
 8000e18:	d05b      	beq.n	8000ed2 <__aeabi_dmul+0x4b6>
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	4011      	ands	r1, r2
 8000e20:	2904      	cmp	r1, #4
 8000e22:	d053      	beq.n	8000ecc <__aeabi_dmul+0x4b0>
 8000e24:	1d11      	adds	r1, r2, #4
 8000e26:	4291      	cmp	r1, r2
 8000e28:	4192      	sbcs	r2, r2
 8000e2a:	4252      	negs	r2, r2
 8000e2c:	18a4      	adds	r4, r4, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	d54b      	bpl.n	8000ecc <__aeabi_dmul+0x4b0>
 8000e34:	2201      	movs	r2, #1
 8000e36:	2400      	movs	r4, #0
 8000e38:	2500      	movs	r5, #0
 8000e3a:	e650      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	031b      	lsls	r3, r3, #12
 8000e40:	421c      	tst	r4, r3
 8000e42:	d009      	beq.n	8000e58 <__aeabi_dmul+0x43c>
 8000e44:	421e      	tst	r6, r3
 8000e46:	d107      	bne.n	8000e58 <__aeabi_dmul+0x43c>
 8000e48:	4333      	orrs	r3, r6
 8000e4a:	031c      	lsls	r4, r3, #12
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	0015      	movs	r5, r2
 8000e50:	0b24      	lsrs	r4, r4, #12
 8000e52:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <__aeabi_dmul+0x4cc>)
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	e642      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	0312      	lsls	r2, r2, #12
 8000e5c:	4314      	orrs	r4, r2
 8000e5e:	0324      	lsls	r4, r4, #12
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <__aeabi_dmul+0x4cc>)
 8000e62:	0b24      	lsrs	r4, r4, #12
 8000e64:	9701      	str	r7, [sp, #4]
 8000e66:	e63a      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000e68:	f000 fc70 	bl	800174c <__clzsi2>
 8000e6c:	0001      	movs	r1, r0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	3115      	adds	r1, #21
 8000e72:	3220      	adds	r2, #32
 8000e74:	291c      	cmp	r1, #28
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_dmul+0x45e>
 8000e78:	e74b      	b.n	8000d12 <__aeabi_dmul+0x2f6>
 8000e7a:	0034      	movs	r4, r6
 8000e7c:	3808      	subs	r0, #8
 8000e7e:	2500      	movs	r5, #0
 8000e80:	4084      	lsls	r4, r0
 8000e82:	e750      	b.n	8000d26 <__aeabi_dmul+0x30a>
 8000e84:	f000 fc62 	bl	800174c <__clzsi2>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	3215      	adds	r2, #21
 8000e8e:	3020      	adds	r0, #32
 8000e90:	2a1c      	cmp	r2, #28
 8000e92:	dc00      	bgt.n	8000e96 <__aeabi_dmul+0x47a>
 8000e94:	e71e      	b.n	8000cd4 <__aeabi_dmul+0x2b8>
 8000e96:	4656      	mov	r6, sl
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	409e      	lsls	r6, r3
 8000e9e:	e723      	b.n	8000ce8 <__aeabi_dmul+0x2cc>
 8000ea0:	9b00      	ldr	r3, [sp, #0]
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	e6e6      	b.n	8000c74 <__aeabi_dmul+0x258>
 8000ea6:	4912      	ldr	r1, [pc, #72]	; (8000ef0 <__aeabi_dmul+0x4d4>)
 8000ea8:	0022      	movs	r2, r4
 8000eaa:	4461      	add	r1, ip
 8000eac:	002e      	movs	r6, r5
 8000eae:	408d      	lsls	r5, r1
 8000eb0:	408a      	lsls	r2, r1
 8000eb2:	40c6      	lsrs	r6, r0
 8000eb4:	1e69      	subs	r1, r5, #1
 8000eb6:	418d      	sbcs	r5, r1
 8000eb8:	4332      	orrs	r2, r6
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	40c4      	lsrs	r4, r0
 8000ebe:	0753      	lsls	r3, r2, #29
 8000ec0:	d0b6      	beq.n	8000e30 <__aeabi_dmul+0x414>
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	4011      	ands	r1, r2
 8000ec6:	2904      	cmp	r1, #4
 8000ec8:	d1ac      	bne.n	8000e24 <__aeabi_dmul+0x408>
 8000eca:	e7b1      	b.n	8000e30 <__aeabi_dmul+0x414>
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	0264      	lsls	r4, r4, #9
 8000ed0:	0b24      	lsrs	r4, r4, #12
 8000ed2:	08d2      	lsrs	r2, r2, #3
 8000ed4:	4315      	orrs	r5, r2
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	e601      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0312      	lsls	r2, r2, #12
 8000ede:	4314      	orrs	r4, r2
 8000ee0:	0324      	lsls	r4, r4, #12
 8000ee2:	4a01      	ldr	r2, [pc, #4]	; (8000ee8 <__aeabi_dmul+0x4cc>)
 8000ee4:	0b24      	lsrs	r4, r4, #12
 8000ee6:	e5fa      	b.n	8000ade <__aeabi_dmul+0xc2>
 8000ee8:	000007ff 	.word	0x000007ff
 8000eec:	0000043e 	.word	0x0000043e
 8000ef0:	0000041e 	.word	0x0000041e

08000ef4 <__aeabi_dsub>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	4657      	mov	r7, sl
 8000ef8:	464e      	mov	r6, r9
 8000efa:	4645      	mov	r5, r8
 8000efc:	46de      	mov	lr, fp
 8000efe:	b5e0      	push	{r5, r6, r7, lr}
 8000f00:	001e      	movs	r6, r3
 8000f02:	0017      	movs	r7, r2
 8000f04:	004a      	lsls	r2, r1, #1
 8000f06:	030b      	lsls	r3, r1, #12
 8000f08:	0d52      	lsrs	r2, r2, #21
 8000f0a:	0a5b      	lsrs	r3, r3, #9
 8000f0c:	4690      	mov	r8, r2
 8000f0e:	0f42      	lsrs	r2, r0, #29
 8000f10:	431a      	orrs	r2, r3
 8000f12:	0fcd      	lsrs	r5, r1, #31
 8000f14:	4ccd      	ldr	r4, [pc, #820]	; (800124c <__aeabi_dsub+0x358>)
 8000f16:	0331      	lsls	r1, r6, #12
 8000f18:	00c3      	lsls	r3, r0, #3
 8000f1a:	4694      	mov	ip, r2
 8000f1c:	0070      	lsls	r0, r6, #1
 8000f1e:	0f7a      	lsrs	r2, r7, #29
 8000f20:	0a49      	lsrs	r1, r1, #9
 8000f22:	00ff      	lsls	r7, r7, #3
 8000f24:	469a      	mov	sl, r3
 8000f26:	46b9      	mov	r9, r7
 8000f28:	0d40      	lsrs	r0, r0, #21
 8000f2a:	0ff6      	lsrs	r6, r6, #31
 8000f2c:	4311      	orrs	r1, r2
 8000f2e:	42a0      	cmp	r0, r4
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dsub+0x40>
 8000f32:	e0b1      	b.n	8001098 <__aeabi_dsub+0x1a4>
 8000f34:	2201      	movs	r2, #1
 8000f36:	4056      	eors	r6, r2
 8000f38:	46b3      	mov	fp, r6
 8000f3a:	42b5      	cmp	r5, r6
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dsub+0x4c>
 8000f3e:	e088      	b.n	8001052 <__aeabi_dsub+0x15e>
 8000f40:	4642      	mov	r2, r8
 8000f42:	1a12      	subs	r2, r2, r0
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	dc00      	bgt.n	8000f4a <__aeabi_dsub+0x56>
 8000f48:	e0ae      	b.n	80010a8 <__aeabi_dsub+0x1b4>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x5c>
 8000f4e:	e0c1      	b.n	80010d4 <__aeabi_dsub+0x1e0>
 8000f50:	48be      	ldr	r0, [pc, #760]	; (800124c <__aeabi_dsub+0x358>)
 8000f52:	4580      	cmp	r8, r0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dsub+0x64>
 8000f56:	e151      	b.n	80011fc <__aeabi_dsub+0x308>
 8000f58:	2080      	movs	r0, #128	; 0x80
 8000f5a:	0400      	lsls	r0, r0, #16
 8000f5c:	4301      	orrs	r1, r0
 8000f5e:	2a38      	cmp	r2, #56	; 0x38
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_dsub+0x70>
 8000f62:	e17b      	b.n	800125c <__aeabi_dsub+0x368>
 8000f64:	2a1f      	cmp	r2, #31
 8000f66:	dd00      	ble.n	8000f6a <__aeabi_dsub+0x76>
 8000f68:	e1ee      	b.n	8001348 <__aeabi_dsub+0x454>
 8000f6a:	2020      	movs	r0, #32
 8000f6c:	003e      	movs	r6, r7
 8000f6e:	1a80      	subs	r0, r0, r2
 8000f70:	000c      	movs	r4, r1
 8000f72:	40d6      	lsrs	r6, r2
 8000f74:	40d1      	lsrs	r1, r2
 8000f76:	4087      	lsls	r7, r0
 8000f78:	4662      	mov	r2, ip
 8000f7a:	4084      	lsls	r4, r0
 8000f7c:	1a52      	subs	r2, r2, r1
 8000f7e:	1e78      	subs	r0, r7, #1
 8000f80:	4187      	sbcs	r7, r0
 8000f82:	4694      	mov	ip, r2
 8000f84:	4334      	orrs	r4, r6
 8000f86:	4327      	orrs	r7, r4
 8000f88:	1bdc      	subs	r4, r3, r7
 8000f8a:	42a3      	cmp	r3, r4
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	4662      	mov	r2, ip
 8000f90:	425b      	negs	r3, r3
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4699      	mov	r9, r3
 8000f96:	464b      	mov	r3, r9
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	d400      	bmi.n	8000f9e <__aeabi_dsub+0xaa>
 8000f9c:	e118      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	0258      	lsls	r0, r3, #9
 8000fa2:	0a43      	lsrs	r3, r0, #9
 8000fa4:	4699      	mov	r9, r3
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dsub+0xba>
 8000fac:	e137      	b.n	800121e <__aeabi_dsub+0x32a>
 8000fae:	4648      	mov	r0, r9
 8000fb0:	f000 fbcc 	bl	800174c <__clzsi2>
 8000fb4:	0001      	movs	r1, r0
 8000fb6:	3908      	subs	r1, #8
 8000fb8:	2320      	movs	r3, #32
 8000fba:	0022      	movs	r2, r4
 8000fbc:	4648      	mov	r0, r9
 8000fbe:	1a5b      	subs	r3, r3, r1
 8000fc0:	40da      	lsrs	r2, r3
 8000fc2:	4088      	lsls	r0, r1
 8000fc4:	408c      	lsls	r4, r1
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	4310      	orrs	r0, r2
 8000fca:	4588      	cmp	r8, r1
 8000fcc:	dd00      	ble.n	8000fd0 <__aeabi_dsub+0xdc>
 8000fce:	e136      	b.n	800123e <__aeabi_dsub+0x34a>
 8000fd0:	1ac9      	subs	r1, r1, r3
 8000fd2:	1c4b      	adds	r3, r1, #1
 8000fd4:	2b1f      	cmp	r3, #31
 8000fd6:	dd00      	ble.n	8000fda <__aeabi_dsub+0xe6>
 8000fd8:	e0ea      	b.n	80011b0 <__aeabi_dsub+0x2bc>
 8000fda:	2220      	movs	r2, #32
 8000fdc:	0026      	movs	r6, r4
 8000fde:	1ad2      	subs	r2, r2, r3
 8000fe0:	0001      	movs	r1, r0
 8000fe2:	4094      	lsls	r4, r2
 8000fe4:	40de      	lsrs	r6, r3
 8000fe6:	40d8      	lsrs	r0, r3
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4091      	lsls	r1, r2
 8000fec:	1e62      	subs	r2, r4, #1
 8000fee:	4194      	sbcs	r4, r2
 8000ff0:	4681      	mov	r9, r0
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4331      	orrs	r1, r6
 8000ff6:	430c      	orrs	r4, r1
 8000ff8:	0763      	lsls	r3, r4, #29
 8000ffa:	d009      	beq.n	8001010 <__aeabi_dsub+0x11c>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	4023      	ands	r3, r4
 8001000:	2b04      	cmp	r3, #4
 8001002:	d005      	beq.n	8001010 <__aeabi_dsub+0x11c>
 8001004:	1d23      	adds	r3, r4, #4
 8001006:	42a3      	cmp	r3, r4
 8001008:	41a4      	sbcs	r4, r4
 800100a:	4264      	negs	r4, r4
 800100c:	44a1      	add	r9, r4
 800100e:	001c      	movs	r4, r3
 8001010:	464b      	mov	r3, r9
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_dsub+0x124>
 8001016:	e0de      	b.n	80011d6 <__aeabi_dsub+0x2e2>
 8001018:	4641      	mov	r1, r8
 800101a:	4b8c      	ldr	r3, [pc, #560]	; (800124c <__aeabi_dsub+0x358>)
 800101c:	3101      	adds	r1, #1
 800101e:	4299      	cmp	r1, r3
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x130>
 8001022:	e0e7      	b.n	80011f4 <__aeabi_dsub+0x300>
 8001024:	464b      	mov	r3, r9
 8001026:	488a      	ldr	r0, [pc, #552]	; (8001250 <__aeabi_dsub+0x35c>)
 8001028:	08e4      	lsrs	r4, r4, #3
 800102a:	4003      	ands	r3, r0
 800102c:	0018      	movs	r0, r3
 800102e:	0549      	lsls	r1, r1, #21
 8001030:	075b      	lsls	r3, r3, #29
 8001032:	0240      	lsls	r0, r0, #9
 8001034:	4323      	orrs	r3, r4
 8001036:	0d4a      	lsrs	r2, r1, #21
 8001038:	0b04      	lsrs	r4, r0, #12
 800103a:	0512      	lsls	r2, r2, #20
 800103c:	07ed      	lsls	r5, r5, #31
 800103e:	4322      	orrs	r2, r4
 8001040:	432a      	orrs	r2, r5
 8001042:	0018      	movs	r0, r3
 8001044:	0011      	movs	r1, r2
 8001046:	bcf0      	pop	{r4, r5, r6, r7}
 8001048:	46bb      	mov	fp, r7
 800104a:	46b2      	mov	sl, r6
 800104c:	46a9      	mov	r9, r5
 800104e:	46a0      	mov	r8, r4
 8001050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001052:	4642      	mov	r2, r8
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	2a00      	cmp	r2, #0
 8001058:	dd52      	ble.n	8001100 <__aeabi_dsub+0x20c>
 800105a:	2800      	cmp	r0, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_dsub+0x16c>
 800105e:	e09c      	b.n	800119a <__aeabi_dsub+0x2a6>
 8001060:	45a0      	cmp	r8, r4
 8001062:	d100      	bne.n	8001066 <__aeabi_dsub+0x172>
 8001064:	e0ca      	b.n	80011fc <__aeabi_dsub+0x308>
 8001066:	2080      	movs	r0, #128	; 0x80
 8001068:	0400      	lsls	r0, r0, #16
 800106a:	4301      	orrs	r1, r0
 800106c:	2a38      	cmp	r2, #56	; 0x38
 800106e:	dd00      	ble.n	8001072 <__aeabi_dsub+0x17e>
 8001070:	e149      	b.n	8001306 <__aeabi_dsub+0x412>
 8001072:	2a1f      	cmp	r2, #31
 8001074:	dc00      	bgt.n	8001078 <__aeabi_dsub+0x184>
 8001076:	e197      	b.n	80013a8 <__aeabi_dsub+0x4b4>
 8001078:	0010      	movs	r0, r2
 800107a:	000e      	movs	r6, r1
 800107c:	3820      	subs	r0, #32
 800107e:	40c6      	lsrs	r6, r0
 8001080:	2a20      	cmp	r2, #32
 8001082:	d004      	beq.n	800108e <__aeabi_dsub+0x19a>
 8001084:	2040      	movs	r0, #64	; 0x40
 8001086:	1a82      	subs	r2, r0, r2
 8001088:	4091      	lsls	r1, r2
 800108a:	430f      	orrs	r7, r1
 800108c:	46b9      	mov	r9, r7
 800108e:	464c      	mov	r4, r9
 8001090:	1e62      	subs	r2, r4, #1
 8001092:	4194      	sbcs	r4, r2
 8001094:	4334      	orrs	r4, r6
 8001096:	e13a      	b.n	800130e <__aeabi_dsub+0x41a>
 8001098:	000a      	movs	r2, r1
 800109a:	433a      	orrs	r2, r7
 800109c:	d028      	beq.n	80010f0 <__aeabi_dsub+0x1fc>
 800109e:	46b3      	mov	fp, r6
 80010a0:	42b5      	cmp	r5, r6
 80010a2:	d02b      	beq.n	80010fc <__aeabi_dsub+0x208>
 80010a4:	4a6b      	ldr	r2, [pc, #428]	; (8001254 <__aeabi_dsub+0x360>)
 80010a6:	4442      	add	r2, r8
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d05d      	beq.n	8001168 <__aeabi_dsub+0x274>
 80010ac:	4642      	mov	r2, r8
 80010ae:	4644      	mov	r4, r8
 80010b0:	1a82      	subs	r2, r0, r2
 80010b2:	2c00      	cmp	r4, #0
 80010b4:	d000      	beq.n	80010b8 <__aeabi_dsub+0x1c4>
 80010b6:	e0f5      	b.n	80012a4 <__aeabi_dsub+0x3b0>
 80010b8:	4665      	mov	r5, ip
 80010ba:	431d      	orrs	r5, r3
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x1cc>
 80010be:	e19c      	b.n	80013fa <__aeabi_dsub+0x506>
 80010c0:	1e55      	subs	r5, r2, #1
 80010c2:	2a01      	cmp	r2, #1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x1d4>
 80010c6:	e1fb      	b.n	80014c0 <__aeabi_dsub+0x5cc>
 80010c8:	4c60      	ldr	r4, [pc, #384]	; (800124c <__aeabi_dsub+0x358>)
 80010ca:	42a2      	cmp	r2, r4
 80010cc:	d100      	bne.n	80010d0 <__aeabi_dsub+0x1dc>
 80010ce:	e1bd      	b.n	800144c <__aeabi_dsub+0x558>
 80010d0:	002a      	movs	r2, r5
 80010d2:	e0f0      	b.n	80012b6 <__aeabi_dsub+0x3c2>
 80010d4:	0008      	movs	r0, r1
 80010d6:	4338      	orrs	r0, r7
 80010d8:	d100      	bne.n	80010dc <__aeabi_dsub+0x1e8>
 80010da:	e0c3      	b.n	8001264 <__aeabi_dsub+0x370>
 80010dc:	1e50      	subs	r0, r2, #1
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x1f0>
 80010e2:	e1a8      	b.n	8001436 <__aeabi_dsub+0x542>
 80010e4:	4c59      	ldr	r4, [pc, #356]	; (800124c <__aeabi_dsub+0x358>)
 80010e6:	42a2      	cmp	r2, r4
 80010e8:	d100      	bne.n	80010ec <__aeabi_dsub+0x1f8>
 80010ea:	e087      	b.n	80011fc <__aeabi_dsub+0x308>
 80010ec:	0002      	movs	r2, r0
 80010ee:	e736      	b.n	8000f5e <__aeabi_dsub+0x6a>
 80010f0:	2201      	movs	r2, #1
 80010f2:	4056      	eors	r6, r2
 80010f4:	46b3      	mov	fp, r6
 80010f6:	42b5      	cmp	r5, r6
 80010f8:	d000      	beq.n	80010fc <__aeabi_dsub+0x208>
 80010fa:	e721      	b.n	8000f40 <__aeabi_dsub+0x4c>
 80010fc:	4a55      	ldr	r2, [pc, #340]	; (8001254 <__aeabi_dsub+0x360>)
 80010fe:	4442      	add	r2, r8
 8001100:	2a00      	cmp	r2, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_dsub+0x212>
 8001104:	e0b5      	b.n	8001272 <__aeabi_dsub+0x37e>
 8001106:	4642      	mov	r2, r8
 8001108:	4644      	mov	r4, r8
 800110a:	1a82      	subs	r2, r0, r2
 800110c:	2c00      	cmp	r4, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_dsub+0x21e>
 8001110:	e138      	b.n	8001384 <__aeabi_dsub+0x490>
 8001112:	4e4e      	ldr	r6, [pc, #312]	; (800124c <__aeabi_dsub+0x358>)
 8001114:	42b0      	cmp	r0, r6
 8001116:	d100      	bne.n	800111a <__aeabi_dsub+0x226>
 8001118:	e1de      	b.n	80014d8 <__aeabi_dsub+0x5e4>
 800111a:	2680      	movs	r6, #128	; 0x80
 800111c:	4664      	mov	r4, ip
 800111e:	0436      	lsls	r6, r6, #16
 8001120:	4334      	orrs	r4, r6
 8001122:	46a4      	mov	ip, r4
 8001124:	2a38      	cmp	r2, #56	; 0x38
 8001126:	dd00      	ble.n	800112a <__aeabi_dsub+0x236>
 8001128:	e196      	b.n	8001458 <__aeabi_dsub+0x564>
 800112a:	2a1f      	cmp	r2, #31
 800112c:	dd00      	ble.n	8001130 <__aeabi_dsub+0x23c>
 800112e:	e224      	b.n	800157a <__aeabi_dsub+0x686>
 8001130:	2620      	movs	r6, #32
 8001132:	1ab4      	subs	r4, r6, r2
 8001134:	46a2      	mov	sl, r4
 8001136:	4664      	mov	r4, ip
 8001138:	4656      	mov	r6, sl
 800113a:	40b4      	lsls	r4, r6
 800113c:	46a1      	mov	r9, r4
 800113e:	001c      	movs	r4, r3
 8001140:	464e      	mov	r6, r9
 8001142:	40d4      	lsrs	r4, r2
 8001144:	4326      	orrs	r6, r4
 8001146:	0034      	movs	r4, r6
 8001148:	4656      	mov	r6, sl
 800114a:	40b3      	lsls	r3, r6
 800114c:	1e5e      	subs	r6, r3, #1
 800114e:	41b3      	sbcs	r3, r6
 8001150:	431c      	orrs	r4, r3
 8001152:	4663      	mov	r3, ip
 8001154:	40d3      	lsrs	r3, r2
 8001156:	18c9      	adds	r1, r1, r3
 8001158:	19e4      	adds	r4, r4, r7
 800115a:	42bc      	cmp	r4, r7
 800115c:	41bf      	sbcs	r7, r7
 800115e:	427f      	negs	r7, r7
 8001160:	46b9      	mov	r9, r7
 8001162:	4680      	mov	r8, r0
 8001164:	4489      	add	r9, r1
 8001166:	e0d8      	b.n	800131a <__aeabi_dsub+0x426>
 8001168:	4640      	mov	r0, r8
 800116a:	4c3b      	ldr	r4, [pc, #236]	; (8001258 <__aeabi_dsub+0x364>)
 800116c:	3001      	adds	r0, #1
 800116e:	4220      	tst	r0, r4
 8001170:	d000      	beq.n	8001174 <__aeabi_dsub+0x280>
 8001172:	e0b4      	b.n	80012de <__aeabi_dsub+0x3ea>
 8001174:	4640      	mov	r0, r8
 8001176:	2800      	cmp	r0, #0
 8001178:	d000      	beq.n	800117c <__aeabi_dsub+0x288>
 800117a:	e144      	b.n	8001406 <__aeabi_dsub+0x512>
 800117c:	4660      	mov	r0, ip
 800117e:	4318      	orrs	r0, r3
 8001180:	d100      	bne.n	8001184 <__aeabi_dsub+0x290>
 8001182:	e190      	b.n	80014a6 <__aeabi_dsub+0x5b2>
 8001184:	0008      	movs	r0, r1
 8001186:	4338      	orrs	r0, r7
 8001188:	d000      	beq.n	800118c <__aeabi_dsub+0x298>
 800118a:	e1aa      	b.n	80014e2 <__aeabi_dsub+0x5ee>
 800118c:	4661      	mov	r1, ip
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	0749      	lsls	r1, r1, #29
 8001192:	430b      	orrs	r3, r1
 8001194:	4661      	mov	r1, ip
 8001196:	08cc      	lsrs	r4, r1, #3
 8001198:	e027      	b.n	80011ea <__aeabi_dsub+0x2f6>
 800119a:	0008      	movs	r0, r1
 800119c:	4338      	orrs	r0, r7
 800119e:	d061      	beq.n	8001264 <__aeabi_dsub+0x370>
 80011a0:	1e50      	subs	r0, r2, #1
 80011a2:	2a01      	cmp	r2, #1
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dsub+0x2b4>
 80011a6:	e139      	b.n	800141c <__aeabi_dsub+0x528>
 80011a8:	42a2      	cmp	r2, r4
 80011aa:	d027      	beq.n	80011fc <__aeabi_dsub+0x308>
 80011ac:	0002      	movs	r2, r0
 80011ae:	e75d      	b.n	800106c <__aeabi_dsub+0x178>
 80011b0:	0002      	movs	r2, r0
 80011b2:	391f      	subs	r1, #31
 80011b4:	40ca      	lsrs	r2, r1
 80011b6:	0011      	movs	r1, r2
 80011b8:	2b20      	cmp	r3, #32
 80011ba:	d003      	beq.n	80011c4 <__aeabi_dsub+0x2d0>
 80011bc:	2240      	movs	r2, #64	; 0x40
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4098      	lsls	r0, r3
 80011c2:	4304      	orrs	r4, r0
 80011c4:	1e63      	subs	r3, r4, #1
 80011c6:	419c      	sbcs	r4, r3
 80011c8:	2300      	movs	r3, #0
 80011ca:	4699      	mov	r9, r3
 80011cc:	4698      	mov	r8, r3
 80011ce:	430c      	orrs	r4, r1
 80011d0:	0763      	lsls	r3, r4, #29
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dsub+0x2e2>
 80011d4:	e712      	b.n	8000ffc <__aeabi_dsub+0x108>
 80011d6:	464b      	mov	r3, r9
 80011d8:	464a      	mov	r2, r9
 80011da:	08e4      	lsrs	r4, r4, #3
 80011dc:	075b      	lsls	r3, r3, #29
 80011de:	4323      	orrs	r3, r4
 80011e0:	08d4      	lsrs	r4, r2, #3
 80011e2:	4642      	mov	r2, r8
 80011e4:	4919      	ldr	r1, [pc, #100]	; (800124c <__aeabi_dsub+0x358>)
 80011e6:	428a      	cmp	r2, r1
 80011e8:	d00e      	beq.n	8001208 <__aeabi_dsub+0x314>
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	0552      	lsls	r2, r2, #21
 80011ee:	0b24      	lsrs	r4, r4, #12
 80011f0:	0d52      	lsrs	r2, r2, #21
 80011f2:	e722      	b.n	800103a <__aeabi_dsub+0x146>
 80011f4:	000a      	movs	r2, r1
 80011f6:	2400      	movs	r4, #0
 80011f8:	2300      	movs	r3, #0
 80011fa:	e71e      	b.n	800103a <__aeabi_dsub+0x146>
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	4662      	mov	r2, ip
 8001200:	0752      	lsls	r2, r2, #29
 8001202:	4313      	orrs	r3, r2
 8001204:	4662      	mov	r2, ip
 8001206:	08d4      	lsrs	r4, r2, #3
 8001208:	001a      	movs	r2, r3
 800120a:	4322      	orrs	r2, r4
 800120c:	d100      	bne.n	8001210 <__aeabi_dsub+0x31c>
 800120e:	e1fc      	b.n	800160a <__aeabi_dsub+0x716>
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	0312      	lsls	r2, r2, #12
 8001214:	4314      	orrs	r4, r2
 8001216:	0324      	lsls	r4, r4, #12
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <__aeabi_dsub+0x358>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e70d      	b.n	800103a <__aeabi_dsub+0x146>
 800121e:	0020      	movs	r0, r4
 8001220:	f000 fa94 	bl	800174c <__clzsi2>
 8001224:	0001      	movs	r1, r0
 8001226:	3118      	adds	r1, #24
 8001228:	291f      	cmp	r1, #31
 800122a:	dc00      	bgt.n	800122e <__aeabi_dsub+0x33a>
 800122c:	e6c4      	b.n	8000fb8 <__aeabi_dsub+0xc4>
 800122e:	3808      	subs	r0, #8
 8001230:	4084      	lsls	r4, r0
 8001232:	4643      	mov	r3, r8
 8001234:	0020      	movs	r0, r4
 8001236:	2400      	movs	r4, #0
 8001238:	4588      	cmp	r8, r1
 800123a:	dc00      	bgt.n	800123e <__aeabi_dsub+0x34a>
 800123c:	e6c8      	b.n	8000fd0 <__aeabi_dsub+0xdc>
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__aeabi_dsub+0x35c>)
 8001240:	1a5b      	subs	r3, r3, r1
 8001242:	4010      	ands	r0, r2
 8001244:	4698      	mov	r8, r3
 8001246:	4681      	mov	r9, r0
 8001248:	e6d6      	b.n	8000ff8 <__aeabi_dsub+0x104>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	000007ff 	.word	0x000007ff
 8001250:	ff7fffff 	.word	0xff7fffff
 8001254:	fffff801 	.word	0xfffff801
 8001258:	000007fe 	.word	0x000007fe
 800125c:	430f      	orrs	r7, r1
 800125e:	1e7a      	subs	r2, r7, #1
 8001260:	4197      	sbcs	r7, r2
 8001262:	e691      	b.n	8000f88 <__aeabi_dsub+0x94>
 8001264:	4661      	mov	r1, ip
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	0749      	lsls	r1, r1, #29
 800126a:	430b      	orrs	r3, r1
 800126c:	4661      	mov	r1, ip
 800126e:	08cc      	lsrs	r4, r1, #3
 8001270:	e7b8      	b.n	80011e4 <__aeabi_dsub+0x2f0>
 8001272:	4640      	mov	r0, r8
 8001274:	4cd3      	ldr	r4, [pc, #844]	; (80015c4 <__aeabi_dsub+0x6d0>)
 8001276:	3001      	adds	r0, #1
 8001278:	4220      	tst	r0, r4
 800127a:	d000      	beq.n	800127e <__aeabi_dsub+0x38a>
 800127c:	e0a2      	b.n	80013c4 <__aeabi_dsub+0x4d0>
 800127e:	4640      	mov	r0, r8
 8001280:	2800      	cmp	r0, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_dsub+0x392>
 8001284:	e101      	b.n	800148a <__aeabi_dsub+0x596>
 8001286:	4660      	mov	r0, ip
 8001288:	4318      	orrs	r0, r3
 800128a:	d100      	bne.n	800128e <__aeabi_dsub+0x39a>
 800128c:	e15e      	b.n	800154c <__aeabi_dsub+0x658>
 800128e:	0008      	movs	r0, r1
 8001290:	4338      	orrs	r0, r7
 8001292:	d000      	beq.n	8001296 <__aeabi_dsub+0x3a2>
 8001294:	e15f      	b.n	8001556 <__aeabi_dsub+0x662>
 8001296:	4661      	mov	r1, ip
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	0749      	lsls	r1, r1, #29
 800129c:	430b      	orrs	r3, r1
 800129e:	4661      	mov	r1, ip
 80012a0:	08cc      	lsrs	r4, r1, #3
 80012a2:	e7a2      	b.n	80011ea <__aeabi_dsub+0x2f6>
 80012a4:	4dc8      	ldr	r5, [pc, #800]	; (80015c8 <__aeabi_dsub+0x6d4>)
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d100      	bne.n	80012ac <__aeabi_dsub+0x3b8>
 80012aa:	e0cf      	b.n	800144c <__aeabi_dsub+0x558>
 80012ac:	2580      	movs	r5, #128	; 0x80
 80012ae:	4664      	mov	r4, ip
 80012b0:	042d      	lsls	r5, r5, #16
 80012b2:	432c      	orrs	r4, r5
 80012b4:	46a4      	mov	ip, r4
 80012b6:	2a38      	cmp	r2, #56	; 0x38
 80012b8:	dc56      	bgt.n	8001368 <__aeabi_dsub+0x474>
 80012ba:	2a1f      	cmp	r2, #31
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dsub+0x3cc>
 80012be:	e0d1      	b.n	8001464 <__aeabi_dsub+0x570>
 80012c0:	2520      	movs	r5, #32
 80012c2:	001e      	movs	r6, r3
 80012c4:	1aad      	subs	r5, r5, r2
 80012c6:	4664      	mov	r4, ip
 80012c8:	40ab      	lsls	r3, r5
 80012ca:	40ac      	lsls	r4, r5
 80012cc:	40d6      	lsrs	r6, r2
 80012ce:	1e5d      	subs	r5, r3, #1
 80012d0:	41ab      	sbcs	r3, r5
 80012d2:	4334      	orrs	r4, r6
 80012d4:	4323      	orrs	r3, r4
 80012d6:	4664      	mov	r4, ip
 80012d8:	40d4      	lsrs	r4, r2
 80012da:	1b09      	subs	r1, r1, r4
 80012dc:	e049      	b.n	8001372 <__aeabi_dsub+0x47e>
 80012de:	4660      	mov	r0, ip
 80012e0:	1bdc      	subs	r4, r3, r7
 80012e2:	1a46      	subs	r6, r0, r1
 80012e4:	42a3      	cmp	r3, r4
 80012e6:	4180      	sbcs	r0, r0
 80012e8:	4240      	negs	r0, r0
 80012ea:	4681      	mov	r9, r0
 80012ec:	0030      	movs	r0, r6
 80012ee:	464e      	mov	r6, r9
 80012f0:	1b80      	subs	r0, r0, r6
 80012f2:	4681      	mov	r9, r0
 80012f4:	0200      	lsls	r0, r0, #8
 80012f6:	d476      	bmi.n	80013e6 <__aeabi_dsub+0x4f2>
 80012f8:	464b      	mov	r3, r9
 80012fa:	4323      	orrs	r3, r4
 80012fc:	d000      	beq.n	8001300 <__aeabi_dsub+0x40c>
 80012fe:	e652      	b.n	8000fa6 <__aeabi_dsub+0xb2>
 8001300:	2400      	movs	r4, #0
 8001302:	2500      	movs	r5, #0
 8001304:	e771      	b.n	80011ea <__aeabi_dsub+0x2f6>
 8001306:	4339      	orrs	r1, r7
 8001308:	000c      	movs	r4, r1
 800130a:	1e62      	subs	r2, r4, #1
 800130c:	4194      	sbcs	r4, r2
 800130e:	18e4      	adds	r4, r4, r3
 8001310:	429c      	cmp	r4, r3
 8001312:	419b      	sbcs	r3, r3
 8001314:	425b      	negs	r3, r3
 8001316:	4463      	add	r3, ip
 8001318:	4699      	mov	r9, r3
 800131a:	464b      	mov	r3, r9
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	d400      	bmi.n	8001322 <__aeabi_dsub+0x42e>
 8001320:	e756      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 8001322:	2301      	movs	r3, #1
 8001324:	469c      	mov	ip, r3
 8001326:	4ba8      	ldr	r3, [pc, #672]	; (80015c8 <__aeabi_dsub+0x6d4>)
 8001328:	44e0      	add	r8, ip
 800132a:	4598      	cmp	r8, r3
 800132c:	d038      	beq.n	80013a0 <__aeabi_dsub+0x4ac>
 800132e:	464b      	mov	r3, r9
 8001330:	48a6      	ldr	r0, [pc, #664]	; (80015cc <__aeabi_dsub+0x6d8>)
 8001332:	2201      	movs	r2, #1
 8001334:	4003      	ands	r3, r0
 8001336:	0018      	movs	r0, r3
 8001338:	0863      	lsrs	r3, r4, #1
 800133a:	4014      	ands	r4, r2
 800133c:	431c      	orrs	r4, r3
 800133e:	07c3      	lsls	r3, r0, #31
 8001340:	431c      	orrs	r4, r3
 8001342:	0843      	lsrs	r3, r0, #1
 8001344:	4699      	mov	r9, r3
 8001346:	e657      	b.n	8000ff8 <__aeabi_dsub+0x104>
 8001348:	0010      	movs	r0, r2
 800134a:	000e      	movs	r6, r1
 800134c:	3820      	subs	r0, #32
 800134e:	40c6      	lsrs	r6, r0
 8001350:	2a20      	cmp	r2, #32
 8001352:	d004      	beq.n	800135e <__aeabi_dsub+0x46a>
 8001354:	2040      	movs	r0, #64	; 0x40
 8001356:	1a82      	subs	r2, r0, r2
 8001358:	4091      	lsls	r1, r2
 800135a:	430f      	orrs	r7, r1
 800135c:	46b9      	mov	r9, r7
 800135e:	464f      	mov	r7, r9
 8001360:	1e7a      	subs	r2, r7, #1
 8001362:	4197      	sbcs	r7, r2
 8001364:	4337      	orrs	r7, r6
 8001366:	e60f      	b.n	8000f88 <__aeabi_dsub+0x94>
 8001368:	4662      	mov	r2, ip
 800136a:	431a      	orrs	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	4193      	sbcs	r3, r2
 8001372:	1afc      	subs	r4, r7, r3
 8001374:	42a7      	cmp	r7, r4
 8001376:	41bf      	sbcs	r7, r7
 8001378:	427f      	negs	r7, r7
 800137a:	1bcb      	subs	r3, r1, r7
 800137c:	4699      	mov	r9, r3
 800137e:	465d      	mov	r5, fp
 8001380:	4680      	mov	r8, r0
 8001382:	e608      	b.n	8000f96 <__aeabi_dsub+0xa2>
 8001384:	4666      	mov	r6, ip
 8001386:	431e      	orrs	r6, r3
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x498>
 800138a:	e0be      	b.n	800150a <__aeabi_dsub+0x616>
 800138c:	1e56      	subs	r6, r2, #1
 800138e:	2a01      	cmp	r2, #1
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x4a0>
 8001392:	e109      	b.n	80015a8 <__aeabi_dsub+0x6b4>
 8001394:	4c8c      	ldr	r4, [pc, #560]	; (80015c8 <__aeabi_dsub+0x6d4>)
 8001396:	42a2      	cmp	r2, r4
 8001398:	d100      	bne.n	800139c <__aeabi_dsub+0x4a8>
 800139a:	e119      	b.n	80015d0 <__aeabi_dsub+0x6dc>
 800139c:	0032      	movs	r2, r6
 800139e:	e6c1      	b.n	8001124 <__aeabi_dsub+0x230>
 80013a0:	4642      	mov	r2, r8
 80013a2:	2400      	movs	r4, #0
 80013a4:	2300      	movs	r3, #0
 80013a6:	e648      	b.n	800103a <__aeabi_dsub+0x146>
 80013a8:	2020      	movs	r0, #32
 80013aa:	000c      	movs	r4, r1
 80013ac:	1a80      	subs	r0, r0, r2
 80013ae:	003e      	movs	r6, r7
 80013b0:	4087      	lsls	r7, r0
 80013b2:	4084      	lsls	r4, r0
 80013b4:	40d6      	lsrs	r6, r2
 80013b6:	1e78      	subs	r0, r7, #1
 80013b8:	4187      	sbcs	r7, r0
 80013ba:	40d1      	lsrs	r1, r2
 80013bc:	4334      	orrs	r4, r6
 80013be:	433c      	orrs	r4, r7
 80013c0:	448c      	add	ip, r1
 80013c2:	e7a4      	b.n	800130e <__aeabi_dsub+0x41a>
 80013c4:	4a80      	ldr	r2, [pc, #512]	; (80015c8 <__aeabi_dsub+0x6d4>)
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x4d8>
 80013ca:	e0e9      	b.n	80015a0 <__aeabi_dsub+0x6ac>
 80013cc:	19df      	adds	r7, r3, r7
 80013ce:	429f      	cmp	r7, r3
 80013d0:	419b      	sbcs	r3, r3
 80013d2:	4461      	add	r1, ip
 80013d4:	425b      	negs	r3, r3
 80013d6:	18c9      	adds	r1, r1, r3
 80013d8:	07cc      	lsls	r4, r1, #31
 80013da:	087f      	lsrs	r7, r7, #1
 80013dc:	084b      	lsrs	r3, r1, #1
 80013de:	4699      	mov	r9, r3
 80013e0:	4680      	mov	r8, r0
 80013e2:	433c      	orrs	r4, r7
 80013e4:	e6f4      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 80013e6:	1afc      	subs	r4, r7, r3
 80013e8:	42a7      	cmp	r7, r4
 80013ea:	41bf      	sbcs	r7, r7
 80013ec:	4663      	mov	r3, ip
 80013ee:	427f      	negs	r7, r7
 80013f0:	1ac9      	subs	r1, r1, r3
 80013f2:	1bcb      	subs	r3, r1, r7
 80013f4:	4699      	mov	r9, r3
 80013f6:	465d      	mov	r5, fp
 80013f8:	e5d5      	b.n	8000fa6 <__aeabi_dsub+0xb2>
 80013fa:	08ff      	lsrs	r7, r7, #3
 80013fc:	074b      	lsls	r3, r1, #29
 80013fe:	465d      	mov	r5, fp
 8001400:	433b      	orrs	r3, r7
 8001402:	08cc      	lsrs	r4, r1, #3
 8001404:	e6ee      	b.n	80011e4 <__aeabi_dsub+0x2f0>
 8001406:	4662      	mov	r2, ip
 8001408:	431a      	orrs	r2, r3
 800140a:	d000      	beq.n	800140e <__aeabi_dsub+0x51a>
 800140c:	e082      	b.n	8001514 <__aeabi_dsub+0x620>
 800140e:	000b      	movs	r3, r1
 8001410:	433b      	orrs	r3, r7
 8001412:	d11b      	bne.n	800144c <__aeabi_dsub+0x558>
 8001414:	2480      	movs	r4, #128	; 0x80
 8001416:	2500      	movs	r5, #0
 8001418:	0324      	lsls	r4, r4, #12
 800141a:	e6f9      	b.n	8001210 <__aeabi_dsub+0x31c>
 800141c:	19dc      	adds	r4, r3, r7
 800141e:	429c      	cmp	r4, r3
 8001420:	419b      	sbcs	r3, r3
 8001422:	4461      	add	r1, ip
 8001424:	4689      	mov	r9, r1
 8001426:	425b      	negs	r3, r3
 8001428:	4499      	add	r9, r3
 800142a:	464b      	mov	r3, r9
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	d444      	bmi.n	80014ba <__aeabi_dsub+0x5c6>
 8001430:	2301      	movs	r3, #1
 8001432:	4698      	mov	r8, r3
 8001434:	e6cc      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 8001436:	1bdc      	subs	r4, r3, r7
 8001438:	4662      	mov	r2, ip
 800143a:	42a3      	cmp	r3, r4
 800143c:	419b      	sbcs	r3, r3
 800143e:	1a51      	subs	r1, r2, r1
 8001440:	425b      	negs	r3, r3
 8001442:	1acb      	subs	r3, r1, r3
 8001444:	4699      	mov	r9, r3
 8001446:	2301      	movs	r3, #1
 8001448:	4698      	mov	r8, r3
 800144a:	e5a4      	b.n	8000f96 <__aeabi_dsub+0xa2>
 800144c:	08ff      	lsrs	r7, r7, #3
 800144e:	074b      	lsls	r3, r1, #29
 8001450:	465d      	mov	r5, fp
 8001452:	433b      	orrs	r3, r7
 8001454:	08cc      	lsrs	r4, r1, #3
 8001456:	e6d7      	b.n	8001208 <__aeabi_dsub+0x314>
 8001458:	4662      	mov	r2, ip
 800145a:	431a      	orrs	r2, r3
 800145c:	0014      	movs	r4, r2
 800145e:	1e63      	subs	r3, r4, #1
 8001460:	419c      	sbcs	r4, r3
 8001462:	e679      	b.n	8001158 <__aeabi_dsub+0x264>
 8001464:	0015      	movs	r5, r2
 8001466:	4664      	mov	r4, ip
 8001468:	3d20      	subs	r5, #32
 800146a:	40ec      	lsrs	r4, r5
 800146c:	46a0      	mov	r8, r4
 800146e:	2a20      	cmp	r2, #32
 8001470:	d005      	beq.n	800147e <__aeabi_dsub+0x58a>
 8001472:	2540      	movs	r5, #64	; 0x40
 8001474:	4664      	mov	r4, ip
 8001476:	1aaa      	subs	r2, r5, r2
 8001478:	4094      	lsls	r4, r2
 800147a:	4323      	orrs	r3, r4
 800147c:	469a      	mov	sl, r3
 800147e:	4654      	mov	r4, sl
 8001480:	1e63      	subs	r3, r4, #1
 8001482:	419c      	sbcs	r4, r3
 8001484:	4643      	mov	r3, r8
 8001486:	4323      	orrs	r3, r4
 8001488:	e773      	b.n	8001372 <__aeabi_dsub+0x47e>
 800148a:	4662      	mov	r2, ip
 800148c:	431a      	orrs	r2, r3
 800148e:	d023      	beq.n	80014d8 <__aeabi_dsub+0x5e4>
 8001490:	000a      	movs	r2, r1
 8001492:	433a      	orrs	r2, r7
 8001494:	d000      	beq.n	8001498 <__aeabi_dsub+0x5a4>
 8001496:	e0a0      	b.n	80015da <__aeabi_dsub+0x6e6>
 8001498:	4662      	mov	r2, ip
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	0752      	lsls	r2, r2, #29
 800149e:	4313      	orrs	r3, r2
 80014a0:	4662      	mov	r2, ip
 80014a2:	08d4      	lsrs	r4, r2, #3
 80014a4:	e6b0      	b.n	8001208 <__aeabi_dsub+0x314>
 80014a6:	000b      	movs	r3, r1
 80014a8:	433b      	orrs	r3, r7
 80014aa:	d100      	bne.n	80014ae <__aeabi_dsub+0x5ba>
 80014ac:	e728      	b.n	8001300 <__aeabi_dsub+0x40c>
 80014ae:	08ff      	lsrs	r7, r7, #3
 80014b0:	074b      	lsls	r3, r1, #29
 80014b2:	465d      	mov	r5, fp
 80014b4:	433b      	orrs	r3, r7
 80014b6:	08cc      	lsrs	r4, r1, #3
 80014b8:	e697      	b.n	80011ea <__aeabi_dsub+0x2f6>
 80014ba:	2302      	movs	r3, #2
 80014bc:	4698      	mov	r8, r3
 80014be:	e736      	b.n	800132e <__aeabi_dsub+0x43a>
 80014c0:	1afc      	subs	r4, r7, r3
 80014c2:	42a7      	cmp	r7, r4
 80014c4:	41bf      	sbcs	r7, r7
 80014c6:	4663      	mov	r3, ip
 80014c8:	427f      	negs	r7, r7
 80014ca:	1ac9      	subs	r1, r1, r3
 80014cc:	1bcb      	subs	r3, r1, r7
 80014ce:	4699      	mov	r9, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	465d      	mov	r5, fp
 80014d4:	4698      	mov	r8, r3
 80014d6:	e55e      	b.n	8000f96 <__aeabi_dsub+0xa2>
 80014d8:	074b      	lsls	r3, r1, #29
 80014da:	08ff      	lsrs	r7, r7, #3
 80014dc:	433b      	orrs	r3, r7
 80014de:	08cc      	lsrs	r4, r1, #3
 80014e0:	e692      	b.n	8001208 <__aeabi_dsub+0x314>
 80014e2:	1bdc      	subs	r4, r3, r7
 80014e4:	4660      	mov	r0, ip
 80014e6:	42a3      	cmp	r3, r4
 80014e8:	41b6      	sbcs	r6, r6
 80014ea:	1a40      	subs	r0, r0, r1
 80014ec:	4276      	negs	r6, r6
 80014ee:	1b80      	subs	r0, r0, r6
 80014f0:	4681      	mov	r9, r0
 80014f2:	0200      	lsls	r0, r0, #8
 80014f4:	d560      	bpl.n	80015b8 <__aeabi_dsub+0x6c4>
 80014f6:	1afc      	subs	r4, r7, r3
 80014f8:	42a7      	cmp	r7, r4
 80014fa:	41bf      	sbcs	r7, r7
 80014fc:	4663      	mov	r3, ip
 80014fe:	427f      	negs	r7, r7
 8001500:	1ac9      	subs	r1, r1, r3
 8001502:	1bcb      	subs	r3, r1, r7
 8001504:	4699      	mov	r9, r3
 8001506:	465d      	mov	r5, fp
 8001508:	e576      	b.n	8000ff8 <__aeabi_dsub+0x104>
 800150a:	08ff      	lsrs	r7, r7, #3
 800150c:	074b      	lsls	r3, r1, #29
 800150e:	433b      	orrs	r3, r7
 8001510:	08cc      	lsrs	r4, r1, #3
 8001512:	e667      	b.n	80011e4 <__aeabi_dsub+0x2f0>
 8001514:	000a      	movs	r2, r1
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	433a      	orrs	r2, r7
 800151a:	d100      	bne.n	800151e <__aeabi_dsub+0x62a>
 800151c:	e66f      	b.n	80011fe <__aeabi_dsub+0x30a>
 800151e:	4662      	mov	r2, ip
 8001520:	0752      	lsls	r2, r2, #29
 8001522:	4313      	orrs	r3, r2
 8001524:	4662      	mov	r2, ip
 8001526:	08d4      	lsrs	r4, r2, #3
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	0312      	lsls	r2, r2, #12
 800152c:	4214      	tst	r4, r2
 800152e:	d007      	beq.n	8001540 <__aeabi_dsub+0x64c>
 8001530:	08c8      	lsrs	r0, r1, #3
 8001532:	4210      	tst	r0, r2
 8001534:	d104      	bne.n	8001540 <__aeabi_dsub+0x64c>
 8001536:	465d      	mov	r5, fp
 8001538:	0004      	movs	r4, r0
 800153a:	08fb      	lsrs	r3, r7, #3
 800153c:	0749      	lsls	r1, r1, #29
 800153e:	430b      	orrs	r3, r1
 8001540:	0f5a      	lsrs	r2, r3, #29
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	0752      	lsls	r2, r2, #29
 8001548:	4313      	orrs	r3, r2
 800154a:	e65d      	b.n	8001208 <__aeabi_dsub+0x314>
 800154c:	074b      	lsls	r3, r1, #29
 800154e:	08ff      	lsrs	r7, r7, #3
 8001550:	433b      	orrs	r3, r7
 8001552:	08cc      	lsrs	r4, r1, #3
 8001554:	e649      	b.n	80011ea <__aeabi_dsub+0x2f6>
 8001556:	19dc      	adds	r4, r3, r7
 8001558:	429c      	cmp	r4, r3
 800155a:	419b      	sbcs	r3, r3
 800155c:	4461      	add	r1, ip
 800155e:	4689      	mov	r9, r1
 8001560:	425b      	negs	r3, r3
 8001562:	4499      	add	r9, r3
 8001564:	464b      	mov	r3, r9
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	d400      	bmi.n	800156c <__aeabi_dsub+0x678>
 800156a:	e631      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 800156c:	464a      	mov	r2, r9
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <__aeabi_dsub+0x6d8>)
 8001570:	401a      	ands	r2, r3
 8001572:	2301      	movs	r3, #1
 8001574:	4691      	mov	r9, r2
 8001576:	4698      	mov	r8, r3
 8001578:	e62a      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 800157a:	0016      	movs	r6, r2
 800157c:	4664      	mov	r4, ip
 800157e:	3e20      	subs	r6, #32
 8001580:	40f4      	lsrs	r4, r6
 8001582:	46a0      	mov	r8, r4
 8001584:	2a20      	cmp	r2, #32
 8001586:	d005      	beq.n	8001594 <__aeabi_dsub+0x6a0>
 8001588:	2640      	movs	r6, #64	; 0x40
 800158a:	4664      	mov	r4, ip
 800158c:	1ab2      	subs	r2, r6, r2
 800158e:	4094      	lsls	r4, r2
 8001590:	4323      	orrs	r3, r4
 8001592:	469a      	mov	sl, r3
 8001594:	4654      	mov	r4, sl
 8001596:	1e63      	subs	r3, r4, #1
 8001598:	419c      	sbcs	r4, r3
 800159a:	4643      	mov	r3, r8
 800159c:	431c      	orrs	r4, r3
 800159e:	e5db      	b.n	8001158 <__aeabi_dsub+0x264>
 80015a0:	0002      	movs	r2, r0
 80015a2:	2400      	movs	r4, #0
 80015a4:	2300      	movs	r3, #0
 80015a6:	e548      	b.n	800103a <__aeabi_dsub+0x146>
 80015a8:	19dc      	adds	r4, r3, r7
 80015aa:	42bc      	cmp	r4, r7
 80015ac:	41bf      	sbcs	r7, r7
 80015ae:	4461      	add	r1, ip
 80015b0:	4689      	mov	r9, r1
 80015b2:	427f      	negs	r7, r7
 80015b4:	44b9      	add	r9, r7
 80015b6:	e738      	b.n	800142a <__aeabi_dsub+0x536>
 80015b8:	464b      	mov	r3, r9
 80015ba:	4323      	orrs	r3, r4
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dsub+0x6cc>
 80015be:	e69f      	b.n	8001300 <__aeabi_dsub+0x40c>
 80015c0:	e606      	b.n	80011d0 <__aeabi_dsub+0x2dc>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	000007fe 	.word	0x000007fe
 80015c8:	000007ff 	.word	0x000007ff
 80015cc:	ff7fffff 	.word	0xff7fffff
 80015d0:	08ff      	lsrs	r7, r7, #3
 80015d2:	074b      	lsls	r3, r1, #29
 80015d4:	433b      	orrs	r3, r7
 80015d6:	08cc      	lsrs	r4, r1, #3
 80015d8:	e616      	b.n	8001208 <__aeabi_dsub+0x314>
 80015da:	4662      	mov	r2, ip
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	0752      	lsls	r2, r2, #29
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4662      	mov	r2, ip
 80015e4:	08d4      	lsrs	r4, r2, #3
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	0312      	lsls	r2, r2, #12
 80015ea:	4214      	tst	r4, r2
 80015ec:	d007      	beq.n	80015fe <__aeabi_dsub+0x70a>
 80015ee:	08c8      	lsrs	r0, r1, #3
 80015f0:	4210      	tst	r0, r2
 80015f2:	d104      	bne.n	80015fe <__aeabi_dsub+0x70a>
 80015f4:	465d      	mov	r5, fp
 80015f6:	0004      	movs	r4, r0
 80015f8:	08fb      	lsrs	r3, r7, #3
 80015fa:	0749      	lsls	r1, r1, #29
 80015fc:	430b      	orrs	r3, r1
 80015fe:	0f5a      	lsrs	r2, r3, #29
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	0752      	lsls	r2, r2, #29
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	e5fe      	b.n	8001208 <__aeabi_dsub+0x314>
 800160a:	2300      	movs	r3, #0
 800160c:	4a01      	ldr	r2, [pc, #4]	; (8001614 <__aeabi_dsub+0x720>)
 800160e:	001c      	movs	r4, r3
 8001610:	e513      	b.n	800103a <__aeabi_dsub+0x146>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff

08001618 <__aeabi_d2iz>:
 8001618:	000a      	movs	r2, r1
 800161a:	b530      	push	{r4, r5, lr}
 800161c:	4c13      	ldr	r4, [pc, #76]	; (800166c <__aeabi_d2iz+0x54>)
 800161e:	0053      	lsls	r3, r2, #1
 8001620:	0309      	lsls	r1, r1, #12
 8001622:	0005      	movs	r5, r0
 8001624:	0b09      	lsrs	r1, r1, #12
 8001626:	2000      	movs	r0, #0
 8001628:	0d5b      	lsrs	r3, r3, #21
 800162a:	0fd2      	lsrs	r2, r2, #31
 800162c:	42a3      	cmp	r3, r4
 800162e:	dd04      	ble.n	800163a <__aeabi_d2iz+0x22>
 8001630:	480f      	ldr	r0, [pc, #60]	; (8001670 <__aeabi_d2iz+0x58>)
 8001632:	4283      	cmp	r3, r0
 8001634:	dd02      	ble.n	800163c <__aeabi_d2iz+0x24>
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <__aeabi_d2iz+0x5c>)
 8001638:	18d0      	adds	r0, r2, r3
 800163a:	bd30      	pop	{r4, r5, pc}
 800163c:	2080      	movs	r0, #128	; 0x80
 800163e:	0340      	lsls	r0, r0, #13
 8001640:	4301      	orrs	r1, r0
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <__aeabi_d2iz+0x60>)
 8001644:	1ac0      	subs	r0, r0, r3
 8001646:	281f      	cmp	r0, #31
 8001648:	dd08      	ble.n	800165c <__aeabi_d2iz+0x44>
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <__aeabi_d2iz+0x64>)
 800164c:	1ac3      	subs	r3, r0, r3
 800164e:	40d9      	lsrs	r1, r3
 8001650:	000b      	movs	r3, r1
 8001652:	4258      	negs	r0, r3
 8001654:	2a00      	cmp	r2, #0
 8001656:	d1f0      	bne.n	800163a <__aeabi_d2iz+0x22>
 8001658:	0018      	movs	r0, r3
 800165a:	e7ee      	b.n	800163a <__aeabi_d2iz+0x22>
 800165c:	4c08      	ldr	r4, [pc, #32]	; (8001680 <__aeabi_d2iz+0x68>)
 800165e:	40c5      	lsrs	r5, r0
 8001660:	46a4      	mov	ip, r4
 8001662:	4463      	add	r3, ip
 8001664:	4099      	lsls	r1, r3
 8001666:	000b      	movs	r3, r1
 8001668:	432b      	orrs	r3, r5
 800166a:	e7f2      	b.n	8001652 <__aeabi_d2iz+0x3a>
 800166c:	000003fe 	.word	0x000003fe
 8001670:	0000041d 	.word	0x0000041d
 8001674:	7fffffff 	.word	0x7fffffff
 8001678:	00000433 	.word	0x00000433
 800167c:	00000413 	.word	0x00000413
 8001680:	fffffbed 	.word	0xfffffbed

08001684 <__aeabi_ui2d>:
 8001684:	b510      	push	{r4, lr}
 8001686:	1e04      	subs	r4, r0, #0
 8001688:	d010      	beq.n	80016ac <__aeabi_ui2d+0x28>
 800168a:	f000 f85f 	bl	800174c <__clzsi2>
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <__aeabi_ui2d+0x48>)
 8001690:	1a1b      	subs	r3, r3, r0
 8001692:	280a      	cmp	r0, #10
 8001694:	dc11      	bgt.n	80016ba <__aeabi_ui2d+0x36>
 8001696:	220b      	movs	r2, #11
 8001698:	0021      	movs	r1, r4
 800169a:	1a12      	subs	r2, r2, r0
 800169c:	40d1      	lsrs	r1, r2
 800169e:	3015      	adds	r0, #21
 80016a0:	030a      	lsls	r2, r1, #12
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	4084      	lsls	r4, r0
 80016a6:	0b12      	lsrs	r2, r2, #12
 80016a8:	0d5b      	lsrs	r3, r3, #21
 80016aa:	e001      	b.n	80016b0 <__aeabi_ui2d+0x2c>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2200      	movs	r2, #0
 80016b0:	051b      	lsls	r3, r3, #20
 80016b2:	4313      	orrs	r3, r2
 80016b4:	0020      	movs	r0, r4
 80016b6:	0019      	movs	r1, r3
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	0022      	movs	r2, r4
 80016bc:	380b      	subs	r0, #11
 80016be:	4082      	lsls	r2, r0
 80016c0:	055b      	lsls	r3, r3, #21
 80016c2:	0312      	lsls	r2, r2, #12
 80016c4:	2400      	movs	r4, #0
 80016c6:	0b12      	lsrs	r2, r2, #12
 80016c8:	0d5b      	lsrs	r3, r3, #21
 80016ca:	e7f1      	b.n	80016b0 <__aeabi_ui2d+0x2c>
 80016cc:	0000041e 	.word	0x0000041e

080016d0 <__aeabi_cdrcmple>:
 80016d0:	4684      	mov	ip, r0
 80016d2:	0010      	movs	r0, r2
 80016d4:	4662      	mov	r2, ip
 80016d6:	468c      	mov	ip, r1
 80016d8:	0019      	movs	r1, r3
 80016da:	4663      	mov	r3, ip
 80016dc:	e000      	b.n	80016e0 <__aeabi_cdcmpeq>
 80016de:	46c0      	nop			; (mov r8, r8)

080016e0 <__aeabi_cdcmpeq>:
 80016e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016e2:	f000 f8f9 	bl	80018d8 <__ledf2>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d401      	bmi.n	80016ee <__aeabi_cdcmpeq+0xe>
 80016ea:	2100      	movs	r1, #0
 80016ec:	42c8      	cmn	r0, r1
 80016ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016f0 <__aeabi_dcmpeq>:
 80016f0:	b510      	push	{r4, lr}
 80016f2:	f000 f849 	bl	8001788 <__eqdf2>
 80016f6:	4240      	negs	r0, r0
 80016f8:	3001      	adds	r0, #1
 80016fa:	bd10      	pop	{r4, pc}

080016fc <__aeabi_dcmplt>:
 80016fc:	b510      	push	{r4, lr}
 80016fe:	f000 f8eb 	bl	80018d8 <__ledf2>
 8001702:	2800      	cmp	r0, #0
 8001704:	db01      	blt.n	800170a <__aeabi_dcmplt+0xe>
 8001706:	2000      	movs	r0, #0
 8001708:	bd10      	pop	{r4, pc}
 800170a:	2001      	movs	r0, #1
 800170c:	bd10      	pop	{r4, pc}
 800170e:	46c0      	nop			; (mov r8, r8)

08001710 <__aeabi_dcmple>:
 8001710:	b510      	push	{r4, lr}
 8001712:	f000 f8e1 	bl	80018d8 <__ledf2>
 8001716:	2800      	cmp	r0, #0
 8001718:	dd01      	ble.n	800171e <__aeabi_dcmple+0xe>
 800171a:	2000      	movs	r0, #0
 800171c:	bd10      	pop	{r4, pc}
 800171e:	2001      	movs	r0, #1
 8001720:	bd10      	pop	{r4, pc}
 8001722:	46c0      	nop			; (mov r8, r8)

08001724 <__aeabi_dcmpgt>:
 8001724:	b510      	push	{r4, lr}
 8001726:	f000 f871 	bl	800180c <__gedf2>
 800172a:	2800      	cmp	r0, #0
 800172c:	dc01      	bgt.n	8001732 <__aeabi_dcmpgt+0xe>
 800172e:	2000      	movs	r0, #0
 8001730:	bd10      	pop	{r4, pc}
 8001732:	2001      	movs	r0, #1
 8001734:	bd10      	pop	{r4, pc}
 8001736:	46c0      	nop			; (mov r8, r8)

08001738 <__aeabi_dcmpge>:
 8001738:	b510      	push	{r4, lr}
 800173a:	f000 f867 	bl	800180c <__gedf2>
 800173e:	2800      	cmp	r0, #0
 8001740:	da01      	bge.n	8001746 <__aeabi_dcmpge+0xe>
 8001742:	2000      	movs	r0, #0
 8001744:	bd10      	pop	{r4, pc}
 8001746:	2001      	movs	r0, #1
 8001748:	bd10      	pop	{r4, pc}
 800174a:	46c0      	nop			; (mov r8, r8)

0800174c <__clzsi2>:
 800174c:	211c      	movs	r1, #28
 800174e:	2301      	movs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	4298      	cmp	r0, r3
 8001754:	d301      	bcc.n	800175a <__clzsi2+0xe>
 8001756:	0c00      	lsrs	r0, r0, #16
 8001758:	3910      	subs	r1, #16
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	4298      	cmp	r0, r3
 800175e:	d301      	bcc.n	8001764 <__clzsi2+0x18>
 8001760:	0a00      	lsrs	r0, r0, #8
 8001762:	3908      	subs	r1, #8
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	4298      	cmp	r0, r3
 8001768:	d301      	bcc.n	800176e <__clzsi2+0x22>
 800176a:	0900      	lsrs	r0, r0, #4
 800176c:	3904      	subs	r1, #4
 800176e:	a202      	add	r2, pc, #8	; (adr r2, 8001778 <__clzsi2+0x2c>)
 8001770:	5c10      	ldrb	r0, [r2, r0]
 8001772:	1840      	adds	r0, r0, r1
 8001774:	4770      	bx	lr
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	02020304 	.word	0x02020304
 800177c:	01010101 	.word	0x01010101
	...

08001788 <__eqdf2>:
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	464e      	mov	r6, r9
 800178c:	4645      	mov	r5, r8
 800178e:	46de      	mov	lr, fp
 8001790:	4657      	mov	r7, sl
 8001792:	4690      	mov	r8, r2
 8001794:	b5e0      	push	{r5, r6, r7, lr}
 8001796:	0017      	movs	r7, r2
 8001798:	031a      	lsls	r2, r3, #12
 800179a:	0b12      	lsrs	r2, r2, #12
 800179c:	0005      	movs	r5, r0
 800179e:	4684      	mov	ip, r0
 80017a0:	4819      	ldr	r0, [pc, #100]	; (8001808 <__eqdf2+0x80>)
 80017a2:	030e      	lsls	r6, r1, #12
 80017a4:	004c      	lsls	r4, r1, #1
 80017a6:	4691      	mov	r9, r2
 80017a8:	005a      	lsls	r2, r3, #1
 80017aa:	0fdb      	lsrs	r3, r3, #31
 80017ac:	469b      	mov	fp, r3
 80017ae:	0b36      	lsrs	r6, r6, #12
 80017b0:	0d64      	lsrs	r4, r4, #21
 80017b2:	0fc9      	lsrs	r1, r1, #31
 80017b4:	0d52      	lsrs	r2, r2, #21
 80017b6:	4284      	cmp	r4, r0
 80017b8:	d019      	beq.n	80017ee <__eqdf2+0x66>
 80017ba:	4282      	cmp	r2, r0
 80017bc:	d010      	beq.n	80017e0 <__eqdf2+0x58>
 80017be:	2001      	movs	r0, #1
 80017c0:	4294      	cmp	r4, r2
 80017c2:	d10e      	bne.n	80017e2 <__eqdf2+0x5a>
 80017c4:	454e      	cmp	r6, r9
 80017c6:	d10c      	bne.n	80017e2 <__eqdf2+0x5a>
 80017c8:	2001      	movs	r0, #1
 80017ca:	45c4      	cmp	ip, r8
 80017cc:	d109      	bne.n	80017e2 <__eqdf2+0x5a>
 80017ce:	4559      	cmp	r1, fp
 80017d0:	d017      	beq.n	8001802 <__eqdf2+0x7a>
 80017d2:	2c00      	cmp	r4, #0
 80017d4:	d105      	bne.n	80017e2 <__eqdf2+0x5a>
 80017d6:	0030      	movs	r0, r6
 80017d8:	4328      	orrs	r0, r5
 80017da:	1e43      	subs	r3, r0, #1
 80017dc:	4198      	sbcs	r0, r3
 80017de:	e000      	b.n	80017e2 <__eqdf2+0x5a>
 80017e0:	2001      	movs	r0, #1
 80017e2:	bcf0      	pop	{r4, r5, r6, r7}
 80017e4:	46bb      	mov	fp, r7
 80017e6:	46b2      	mov	sl, r6
 80017e8:	46a9      	mov	r9, r5
 80017ea:	46a0      	mov	r8, r4
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	0033      	movs	r3, r6
 80017f0:	2001      	movs	r0, #1
 80017f2:	432b      	orrs	r3, r5
 80017f4:	d1f5      	bne.n	80017e2 <__eqdf2+0x5a>
 80017f6:	42a2      	cmp	r2, r4
 80017f8:	d1f3      	bne.n	80017e2 <__eqdf2+0x5a>
 80017fa:	464b      	mov	r3, r9
 80017fc:	433b      	orrs	r3, r7
 80017fe:	d1f0      	bne.n	80017e2 <__eqdf2+0x5a>
 8001800:	e7e2      	b.n	80017c8 <__eqdf2+0x40>
 8001802:	2000      	movs	r0, #0
 8001804:	e7ed      	b.n	80017e2 <__eqdf2+0x5a>
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	000007ff 	.word	0x000007ff

0800180c <__gedf2>:
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	4647      	mov	r7, r8
 8001810:	46ce      	mov	lr, r9
 8001812:	0004      	movs	r4, r0
 8001814:	0018      	movs	r0, r3
 8001816:	0016      	movs	r6, r2
 8001818:	031b      	lsls	r3, r3, #12
 800181a:	0b1b      	lsrs	r3, r3, #12
 800181c:	4d2d      	ldr	r5, [pc, #180]	; (80018d4 <__gedf2+0xc8>)
 800181e:	004a      	lsls	r2, r1, #1
 8001820:	4699      	mov	r9, r3
 8001822:	b580      	push	{r7, lr}
 8001824:	0043      	lsls	r3, r0, #1
 8001826:	030f      	lsls	r7, r1, #12
 8001828:	46a4      	mov	ip, r4
 800182a:	46b0      	mov	r8, r6
 800182c:	0b3f      	lsrs	r7, r7, #12
 800182e:	0d52      	lsrs	r2, r2, #21
 8001830:	0fc9      	lsrs	r1, r1, #31
 8001832:	0d5b      	lsrs	r3, r3, #21
 8001834:	0fc0      	lsrs	r0, r0, #31
 8001836:	42aa      	cmp	r2, r5
 8001838:	d021      	beq.n	800187e <__gedf2+0x72>
 800183a:	42ab      	cmp	r3, r5
 800183c:	d013      	beq.n	8001866 <__gedf2+0x5a>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d122      	bne.n	8001888 <__gedf2+0x7c>
 8001842:	433c      	orrs	r4, r7
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <__gedf2+0x42>
 8001848:	464d      	mov	r5, r9
 800184a:	432e      	orrs	r6, r5
 800184c:	d022      	beq.n	8001894 <__gedf2+0x88>
 800184e:	2c00      	cmp	r4, #0
 8001850:	d010      	beq.n	8001874 <__gedf2+0x68>
 8001852:	4281      	cmp	r1, r0
 8001854:	d022      	beq.n	800189c <__gedf2+0x90>
 8001856:	2002      	movs	r0, #2
 8001858:	3901      	subs	r1, #1
 800185a:	4008      	ands	r0, r1
 800185c:	3801      	subs	r0, #1
 800185e:	bcc0      	pop	{r6, r7}
 8001860:	46b9      	mov	r9, r7
 8001862:	46b0      	mov	r8, r6
 8001864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001866:	464d      	mov	r5, r9
 8001868:	432e      	orrs	r6, r5
 800186a:	d129      	bne.n	80018c0 <__gedf2+0xb4>
 800186c:	2a00      	cmp	r2, #0
 800186e:	d1f0      	bne.n	8001852 <__gedf2+0x46>
 8001870:	433c      	orrs	r4, r7
 8001872:	d1ee      	bne.n	8001852 <__gedf2+0x46>
 8001874:	2800      	cmp	r0, #0
 8001876:	d1f2      	bne.n	800185e <__gedf2+0x52>
 8001878:	2001      	movs	r0, #1
 800187a:	4240      	negs	r0, r0
 800187c:	e7ef      	b.n	800185e <__gedf2+0x52>
 800187e:	003d      	movs	r5, r7
 8001880:	4325      	orrs	r5, r4
 8001882:	d11d      	bne.n	80018c0 <__gedf2+0xb4>
 8001884:	4293      	cmp	r3, r2
 8001886:	d0ee      	beq.n	8001866 <__gedf2+0x5a>
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e2      	bne.n	8001852 <__gedf2+0x46>
 800188c:	464c      	mov	r4, r9
 800188e:	4326      	orrs	r6, r4
 8001890:	d1df      	bne.n	8001852 <__gedf2+0x46>
 8001892:	e7e0      	b.n	8001856 <__gedf2+0x4a>
 8001894:	2000      	movs	r0, #0
 8001896:	2c00      	cmp	r4, #0
 8001898:	d0e1      	beq.n	800185e <__gedf2+0x52>
 800189a:	e7dc      	b.n	8001856 <__gedf2+0x4a>
 800189c:	429a      	cmp	r2, r3
 800189e:	dc0a      	bgt.n	80018b6 <__gedf2+0xaa>
 80018a0:	dbe8      	blt.n	8001874 <__gedf2+0x68>
 80018a2:	454f      	cmp	r7, r9
 80018a4:	d8d7      	bhi.n	8001856 <__gedf2+0x4a>
 80018a6:	d00e      	beq.n	80018c6 <__gedf2+0xba>
 80018a8:	2000      	movs	r0, #0
 80018aa:	454f      	cmp	r7, r9
 80018ac:	d2d7      	bcs.n	800185e <__gedf2+0x52>
 80018ae:	2900      	cmp	r1, #0
 80018b0:	d0e2      	beq.n	8001878 <__gedf2+0x6c>
 80018b2:	0008      	movs	r0, r1
 80018b4:	e7d3      	b.n	800185e <__gedf2+0x52>
 80018b6:	4243      	negs	r3, r0
 80018b8:	4158      	adcs	r0, r3
 80018ba:	0040      	lsls	r0, r0, #1
 80018bc:	3801      	subs	r0, #1
 80018be:	e7ce      	b.n	800185e <__gedf2+0x52>
 80018c0:	2002      	movs	r0, #2
 80018c2:	4240      	negs	r0, r0
 80018c4:	e7cb      	b.n	800185e <__gedf2+0x52>
 80018c6:	45c4      	cmp	ip, r8
 80018c8:	d8c5      	bhi.n	8001856 <__gedf2+0x4a>
 80018ca:	2000      	movs	r0, #0
 80018cc:	45c4      	cmp	ip, r8
 80018ce:	d2c6      	bcs.n	800185e <__gedf2+0x52>
 80018d0:	e7ed      	b.n	80018ae <__gedf2+0xa2>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	4647      	mov	r7, r8
 80018dc:	46ce      	mov	lr, r9
 80018de:	0004      	movs	r4, r0
 80018e0:	0018      	movs	r0, r3
 80018e2:	0016      	movs	r6, r2
 80018e4:	031b      	lsls	r3, r3, #12
 80018e6:	0b1b      	lsrs	r3, r3, #12
 80018e8:	4d2c      	ldr	r5, [pc, #176]	; (800199c <__ledf2+0xc4>)
 80018ea:	004a      	lsls	r2, r1, #1
 80018ec:	4699      	mov	r9, r3
 80018ee:	b580      	push	{r7, lr}
 80018f0:	0043      	lsls	r3, r0, #1
 80018f2:	030f      	lsls	r7, r1, #12
 80018f4:	46a4      	mov	ip, r4
 80018f6:	46b0      	mov	r8, r6
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	0d52      	lsrs	r2, r2, #21
 80018fc:	0fc9      	lsrs	r1, r1, #31
 80018fe:	0d5b      	lsrs	r3, r3, #21
 8001900:	0fc0      	lsrs	r0, r0, #31
 8001902:	42aa      	cmp	r2, r5
 8001904:	d00d      	beq.n	8001922 <__ledf2+0x4a>
 8001906:	42ab      	cmp	r3, r5
 8001908:	d010      	beq.n	800192c <__ledf2+0x54>
 800190a:	2a00      	cmp	r2, #0
 800190c:	d127      	bne.n	800195e <__ledf2+0x86>
 800190e:	433c      	orrs	r4, r7
 8001910:	2b00      	cmp	r3, #0
 8001912:	d111      	bne.n	8001938 <__ledf2+0x60>
 8001914:	464d      	mov	r5, r9
 8001916:	432e      	orrs	r6, r5
 8001918:	d10e      	bne.n	8001938 <__ledf2+0x60>
 800191a:	2000      	movs	r0, #0
 800191c:	2c00      	cmp	r4, #0
 800191e:	d015      	beq.n	800194c <__ledf2+0x74>
 8001920:	e00e      	b.n	8001940 <__ledf2+0x68>
 8001922:	003d      	movs	r5, r7
 8001924:	4325      	orrs	r5, r4
 8001926:	d110      	bne.n	800194a <__ledf2+0x72>
 8001928:	4293      	cmp	r3, r2
 800192a:	d118      	bne.n	800195e <__ledf2+0x86>
 800192c:	464d      	mov	r5, r9
 800192e:	432e      	orrs	r6, r5
 8001930:	d10b      	bne.n	800194a <__ledf2+0x72>
 8001932:	2a00      	cmp	r2, #0
 8001934:	d102      	bne.n	800193c <__ledf2+0x64>
 8001936:	433c      	orrs	r4, r7
 8001938:	2c00      	cmp	r4, #0
 800193a:	d00b      	beq.n	8001954 <__ledf2+0x7c>
 800193c:	4281      	cmp	r1, r0
 800193e:	d014      	beq.n	800196a <__ledf2+0x92>
 8001940:	2002      	movs	r0, #2
 8001942:	3901      	subs	r1, #1
 8001944:	4008      	ands	r0, r1
 8001946:	3801      	subs	r0, #1
 8001948:	e000      	b.n	800194c <__ledf2+0x74>
 800194a:	2002      	movs	r0, #2
 800194c:	bcc0      	pop	{r6, r7}
 800194e:	46b9      	mov	r9, r7
 8001950:	46b0      	mov	r8, r6
 8001952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001954:	2800      	cmp	r0, #0
 8001956:	d1f9      	bne.n	800194c <__ledf2+0x74>
 8001958:	2001      	movs	r0, #1
 800195a:	4240      	negs	r0, r0
 800195c:	e7f6      	b.n	800194c <__ledf2+0x74>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ec      	bne.n	800193c <__ledf2+0x64>
 8001962:	464c      	mov	r4, r9
 8001964:	4326      	orrs	r6, r4
 8001966:	d1e9      	bne.n	800193c <__ledf2+0x64>
 8001968:	e7ea      	b.n	8001940 <__ledf2+0x68>
 800196a:	429a      	cmp	r2, r3
 800196c:	dd04      	ble.n	8001978 <__ledf2+0xa0>
 800196e:	4243      	negs	r3, r0
 8001970:	4158      	adcs	r0, r3
 8001972:	0040      	lsls	r0, r0, #1
 8001974:	3801      	subs	r0, #1
 8001976:	e7e9      	b.n	800194c <__ledf2+0x74>
 8001978:	429a      	cmp	r2, r3
 800197a:	dbeb      	blt.n	8001954 <__ledf2+0x7c>
 800197c:	454f      	cmp	r7, r9
 800197e:	d8df      	bhi.n	8001940 <__ledf2+0x68>
 8001980:	d006      	beq.n	8001990 <__ledf2+0xb8>
 8001982:	2000      	movs	r0, #0
 8001984:	454f      	cmp	r7, r9
 8001986:	d2e1      	bcs.n	800194c <__ledf2+0x74>
 8001988:	2900      	cmp	r1, #0
 800198a:	d0e5      	beq.n	8001958 <__ledf2+0x80>
 800198c:	0008      	movs	r0, r1
 800198e:	e7dd      	b.n	800194c <__ledf2+0x74>
 8001990:	45c4      	cmp	ip, r8
 8001992:	d8d5      	bhi.n	8001940 <__ledf2+0x68>
 8001994:	2000      	movs	r0, #0
 8001996:	45c4      	cmp	ip, r8
 8001998:	d2d8      	bcs.n	800194c <__ledf2+0x74>
 800199a:	e7f5      	b.n	8001988 <__ledf2+0xb0>
 800199c:	000007ff 	.word	0x000007ff

080019a0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	static volatile uint32_t channel;

	if (channel == 0)
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x94>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d116      	bne.n	80019de <HAL_ADC_ConvCpltCallback+0x3e>
	{
		raw_pot = avg_pot >> ADC_Q;
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x98>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0b1a      	lsrs	r2, r3, #12
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_ADC_ConvCpltCallback+0x9c>)
 80019b8:	601a      	str	r2, [r3, #0]
		avg_pot -= raw_pot;
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_ADC_ConvCpltCallback+0x9c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x98>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1a9a      	subs	r2, r3, r2
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x98>)
 80019c6:	601a      	str	r2, [r3, #0]
		avg_pot += HAL_ADC_GetValue(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 fe90 	bl	80026f0 <HAL_ADC_GetValue>
 80019d0:	0002      	movs	r2, r0
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x98>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	18d2      	adds	r2, r2, r3
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x98>)
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e016      	b.n	8001a0c <HAL_ADC_ConvCpltCallback+0x6c>
	}
	else if (channel == 1)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x94>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_ADC_ConvCpltCallback+0x56>
	{
		raw_temp = HAL_ADC_GetValue(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 fe81 	bl	80026f0 <HAL_ADC_GetValue>
 80019ee:	0002      	movs	r2, r0
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa0>)
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e00a      	b.n	8001a0c <HAL_ADC_ConvCpltCallback+0x6c>
	}
	else if (channel == 2)
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x94>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d106      	bne.n	8001a0c <HAL_ADC_ConvCpltCallback+0x6c>
	{
		raw_volt = HAL_ADC_GetValue(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 fe75 	bl	80026f0 <HAL_ADC_GetValue>
 8001a06:	0002      	movs	r2, r0
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a0a:	601a      	str	r2, [r3, #0]
	}

	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) channel = 0;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2208      	movs	r2, #8
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d103      	bne.n	8001a22 <HAL_ADC_ConvCpltCallback+0x82>
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
	else channel++;

}
 8001a20:	e004      	b.n	8001a2c <HAL_ADC_ConvCpltCallback+0x8c>
	else channel++;
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x94>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x94>)
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200000fc 	.word	0x200000fc
 8001a38:	200000f8 	.word	0x200000f8
 8001a3c:	200000ec 	.word	0x200000ec
 8001a40:	200000f0 	.word	0x200000f0
 8001a44:	200000f4 	.word	0x200000f4

08001a48 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a4e:	f000 fc15 	bl	800227c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a52:	f000 f8d5 	bl	8001c00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a56:	f000 f9c7 	bl	8001de8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001a5a:	f000 f995 	bl	8001d88 <MX_USART2_UART_Init>
	MX_ADC_Init();
 8001a5e:	f000 f91f 	bl	8001ca0 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	sct_init();
 8001a62:	f000 fa68 	bl	8001f36 <sct_init>
	HAL_ADCEx_Calibration_Start(&hadc);
 8001a66:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <main+0x184>)
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f001 f88f 	bl	8002b8c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc);
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <main+0x184>)
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 fdcb 	bl	800260c <HAL_ADC_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		uint32_t voltage = 330 * (*VREFINT_CAL_ADDR) / raw_volt;
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <main+0x188>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	001a      	movs	r2, r3
 8001a8a:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <main+0x18c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0019      	movs	r1, r3
 8001a90:	0010      	movs	r0, r2
 8001a92:	f7fe fb39 	bl	8000108 <__udivsi3>
 8001a96:	0003      	movs	r3, r0
 8001a98:	607b      	str	r3, [r7, #4]
		int32_t temperature = (raw_temp - (int32_t)(*TEMP30_CAL_ADDR));
 8001a9a:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <main+0x190>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <main+0x194>)
 8001aa0:	8812      	ldrh	r2, [r2, #0]
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	603b      	str	r3, [r7, #0]
		temperature = temperature * (int32_t)(110 - 30);
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	189b      	adds	r3, r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	603b      	str	r3, [r7, #0]
		temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <main+0x198>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <main+0x194>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	0019      	movs	r1, r3
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f7fe fbab 	bl	800021c <__divsi3>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	603b      	str	r3, [r7, #0]
		temperature = temperature + 30;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	331e      	adds	r3, #30
 8001ace:	603b      	str	r3, [r7, #0]

		static enum { SHOW_POT, SHOW_VOLT, SHOW_TEMP } state = SHOW_POT;
		static uint32_t time;

		if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == 0) {
 8001ad0:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <main+0x19c>)
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f001 fb4f 	bl	8003178 <HAL_GPIO_ReadPin>
 8001ada:	1e03      	subs	r3, r0, #0
 8001adc:	d108      	bne.n	8001af0 <main+0xa8>
			state = SHOW_VOLT;
 8001ade:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <main+0x1a0>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
			time = HAL_GetTick();
 8001ae4:	f000 fc24 	bl	8002330 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <main+0x1a4>)
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e00e      	b.n	8001b0e <main+0xc6>

		}
		else if (HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == 0) {
 8001af0:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <main+0x19c>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	0018      	movs	r0, r3
 8001af6:	f001 fb3f 	bl	8003178 <HAL_GPIO_ReadPin>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d107      	bne.n	8001b0e <main+0xc6>
			state = SHOW_TEMP;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <main+0x1a0>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	701a      	strb	r2, [r3, #0]
			time = HAL_GetTick();
 8001b04:	f000 fc14 	bl	8002330 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <main+0x1a4>)
 8001b0c:	601a      	str	r2, [r3, #0]

		}

		if ((time + 1000) <= HAL_GetTick())
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <main+0x1a4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	22fa      	movs	r2, #250	; 0xfa
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	189c      	adds	r4, r3, r2
 8001b18:	f000 fc0a 	bl	8002330 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	429c      	cmp	r4, r3
 8001b20:	d802      	bhi.n	8001b28 <main+0xe0>
		{
			state = SHOW_POT;
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <main+0x1a0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
		}

		switch(state) {
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <main+0x1a0>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d02e      	beq.n	8001b8e <main+0x146>
 8001b30:	dca1      	bgt.n	8001a76 <main+0x2e>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <main+0xf4>
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d038      	beq.n	8001bac <main+0x164>
 8001b3a:	e046      	b.n	8001bca <main+0x182>

		case SHOW_POT:
			sct_value(raw_pot*500.5/4095, raw_pot*8/4095);
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <main+0x1a8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff fd9f 	bl	8001684 <__aeabi_ui2d>
 8001b46:	2200      	movs	r2, #0
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <main+0x1ac>)
 8001b4a:	f7fe ff67 	bl	8000a1c <__aeabi_dmul>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	000b      	movs	r3, r1
 8001b52:	0010      	movs	r0, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	2200      	movs	r2, #0
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <main+0x1b0>)
 8001b5a:	f7fe fc69 	bl	8000430 <__aeabi_ddiv>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	000b      	movs	r3, r1
 8001b62:	0010      	movs	r0, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	f7fe fc45 	bl	80003f4 <__aeabi_d2uiz>
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <main+0x1a8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4922      	ldr	r1, [pc, #136]	; (8001bfc <main+0x1b4>)
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7fe fac7 	bl	8000108 <__udivsi3>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	0019      	movs	r1, r3
 8001b80:	0020      	movs	r0, r4
 8001b82:	f000 fa19 	bl	8001fb8 <sct_value>
			HAL_Delay(50);
 8001b86:	2032      	movs	r0, #50	; 0x32
 8001b88:	f000 fbdc 	bl	8002344 <HAL_Delay>
			break;
 8001b8c:	e01d      	b.n	8001bca <main+0x182>
		case SHOW_TEMP:
			sct_value(temperature, raw_pot*8/4095);
 8001b8e:	683c      	ldr	r4, [r7, #0]
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <main+0x1a8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4919      	ldr	r1, [pc, #100]	; (8001bfc <main+0x1b4>)
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe fab5 	bl	8000108 <__udivsi3>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	0020      	movs	r0, r4
 8001ba6:	f000 fa07 	bl	8001fb8 <sct_value>
			break;
 8001baa:	e00e      	b.n	8001bca <main+0x182>
		case SHOW_VOLT:
			sct_value(voltage, raw_pot*8/4095);
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <main+0x1a8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4912      	ldr	r1, [pc, #72]	; (8001bfc <main+0x1b4>)
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7fe faa7 	bl	8000108 <__udivsi3>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 f9f8 	bl	8001fb8 <sct_value>
			break;
 8001bc8:	46c0      	nop			; (mov r8, r8)
	{
 8001bca:	e754      	b.n	8001a76 <main+0x2e>
 8001bcc:	20000028 	.word	0x20000028
 8001bd0:	1ffff7ba 	.word	0x1ffff7ba
 8001bd4:	200000f4 	.word	0x200000f4
 8001bd8:	200000f0 	.word	0x200000f0
 8001bdc:	1ffff7b8 	.word	0x1ffff7b8
 8001be0:	1ffff7c2 	.word	0x1ffff7c2
 8001be4:	48000800 	.word	0x48000800
 8001be8:	20000100 	.word	0x20000100
 8001bec:	20000104 	.word	0x20000104
 8001bf0:	200000ec 	.word	0x200000ec
 8001bf4:	407f4800 	.word	0x407f4800
 8001bf8:	40affe00 	.word	0x40affe00
 8001bfc:	00000fff 	.word	0x00000fff

08001c00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b091      	sub	sp, #68	; 0x44
 8001c04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	2410      	movs	r4, #16
 8001c08:	193b      	adds	r3, r7, r4
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	2330      	movs	r3, #48	; 0x30
 8001c0e:	001a      	movs	r2, r3
 8001c10:	2100      	movs	r1, #0
 8001c12:	f002 facf 	bl	80041b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c16:	003b      	movs	r3, r7
 8001c18:	0018      	movs	r0, r3
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f002 fac8 	bl	80041b4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001c24:	0021      	movs	r1, r4
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2212      	movs	r2, #18
 8001c2a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2201      	movs	r2, #1
 8001c36:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2210      	movs	r2, #16
 8001c42:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2202      	movs	r2, #2
 8001c48:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	22a0      	movs	r2, #160	; 0xa0
 8001c54:	0392      	lsls	r2, r2, #14
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	0018      	movs	r0, r3
 8001c62:	f001 fac3 	bl	80031ec <HAL_RCC_OscConfig>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8001c6a:	f000 f95f 	bl	8001f2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6e:	003b      	movs	r3, r7
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	003b      	movs	r3, r7
 8001c76:	2202      	movs	r2, #2
 8001c78:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7a:	003b      	movs	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c80:	003b      	movs	r3, r7
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c86:	003b      	movs	r3, r7
 8001c88:	2101      	movs	r1, #1
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f001 fdc8 	bl	8003820 <HAL_RCC_ClockConfig>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001c94:	f000 f94a 	bl	8001f2c <Error_Handler>
	}
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b011      	add	sp, #68	; 0x44
 8001c9e:	bd90      	pop	{r4, r7, pc}

08001ca0 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	230c      	movs	r3, #12
 8001cac:	001a      	movs	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f002 fa80 	bl	80041b4 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cb6:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <MX_ADC_Init+0xe4>)
 8001cb8:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cf2:	22c2      	movs	r2, #194	; 0xc2
 8001cf4:	32ff      	adds	r2, #255	; 0xff
 8001cf6:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001d00:	2224      	movs	r2, #36	; 0x24
 8001d02:	2100      	movs	r1, #0
 8001d04:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 fb3c 	bl	800238c <HAL_ADC_Init>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC_Init+0x7c>
	{
		Error_Handler();
 8001d18:	f000 f908 	bl	8001f2c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	0152      	lsls	r2, r2, #5
 8001d28:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d30:	1d3a      	adds	r2, r7, #4
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001d34:	0011      	movs	r1, r2
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fdae 	bl	8002898 <HAL_ADC_ConfigChannel>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_ADC_Init+0xa4>
	{
		Error_Handler();
 8001d40:	f000 f8f4 	bl	8001f2c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2210      	movs	r2, #16
 8001d48:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d4a:	1d3a      	adds	r2, r7, #4
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 fda1 	bl	8002898 <HAL_ADC_ConfigChannel>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC_Init+0xbe>
	{
		Error_Handler();
 8001d5a:	f000 f8e7 	bl	8001f2c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2211      	movs	r2, #17
 8001d62:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d64:	1d3a      	adds	r2, r7, #4
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_ADC_Init+0xe0>)
 8001d68:	0011      	movs	r1, r2
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 fd94 	bl	8002898 <HAL_ADC_ConfigChannel>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <MX_ADC_Init+0xd8>
	{
		Error_Handler();
 8001d74:	f000 f8da 	bl	8001f2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000028 	.word	0x20000028
 8001d84:	40012400 	.word	0x40012400

08001d88 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <MX_USART2_UART_Init+0x5c>)
 8001d90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001d94:	2296      	movs	r2, #150	; 0x96
 8001d96:	0212      	lsls	r2, r2, #8
 8001d98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <MX_USART2_UART_Init+0x58>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f001 fe79 	bl	8003ac4 <HAL_UART_Init>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001dd6:	f000 f8a9 	bl	8001f2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000068 	.word	0x20000068
 8001de4:	40004400 	.word	0x40004400

08001de8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b08b      	sub	sp, #44	; 0x2c
 8001dec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	2414      	movs	r4, #20
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	0018      	movs	r0, r3
 8001df4:	2314      	movs	r3, #20
 8001df6:	001a      	movs	r2, r3
 8001df8:	2100      	movs	r1, #0
 8001dfa:	f002 f9db 	bl	80041b4 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0309      	lsls	r1, r1, #12
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	031b      	lsls	r3, r3, #12
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	03c9      	lsls	r1, r1, #15
 8001e24:	430a      	orrs	r2, r1
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	03db      	lsls	r3, r3, #15
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0289      	lsls	r1, r1, #10
 8001e40:	430a      	orrs	r2, r1
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	02c9      	lsls	r1, r1, #11
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	02db      	lsls	r3, r3, #11
 8001e68:	4013      	ands	r3, r2
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e6e:	2390      	movs	r3, #144	; 0x90
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	2200      	movs	r2, #0
 8001e74:	2120      	movs	r1, #32
 8001e76:	0018      	movs	r0, r3
 8001e78:	f001 f99b 	bl	80031b2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e7c:	2387      	movs	r3, #135	; 0x87
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4828      	ldr	r0, [pc, #160]	; (8001f24 <MX_GPIO_Init+0x13c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	0019      	movs	r1, r3
 8001e86:	f001 f994 	bl	80031b2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0192      	lsls	r2, r2, #6
 8001e90:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	2284      	movs	r2, #132	; 0x84
 8001e96:	0392      	lsls	r2, r2, #14
 8001e98:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <MX_GPIO_Init+0x140>)
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	f000 fff6 	bl	8002e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	2203      	movs	r2, #3
 8001eb0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	2201      	movs	r2, #1
 8001ebc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebe:	193b      	adds	r3, r7, r4
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <MX_GPIO_Init+0x140>)
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	0010      	movs	r0, r2
 8001ec6:	f000 ffe7 	bl	8002e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	2220      	movs	r2, #32
 8001ece:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	193b      	adds	r3, r7, r4
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	193b      	adds	r3, r7, r4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	193a      	adds	r2, r7, r4
 8001ee4:	2390      	movs	r3, #144	; 0x90
 8001ee6:	05db      	lsls	r3, r3, #23
 8001ee8:	0011      	movs	r1, r2
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 ffd4 	bl	8002e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ef0:	0021      	movs	r1, r4
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2287      	movs	r2, #135	; 0x87
 8001ef6:	00d2      	lsls	r2, r2, #3
 8001ef8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2201      	movs	r2, #1
 8001efe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <MX_GPIO_Init+0x13c>)
 8001f10:	0019      	movs	r1, r3
 8001f12:	0010      	movs	r0, r2
 8001f14:	f000 ffc0 	bl	8002e98 <HAL_GPIO_Init>

}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b00b      	add	sp, #44	; 0x2c
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400
 8001f28:	48000800 	.word	0x48000800

08001f2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f34:	e7fe      	b.n	8001f34 <Error_Handler+0x8>

08001f36 <sct_init>:

#include <main.h>
#include "sct.h"


void sct_init(void) {
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0

	sct_led(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f000 f804 	bl	8001f48 <sct_led>
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <sct_led>:

void sct_led(uint32_t value) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

	int i;

	for ( i = 0; i < 32; i = i + 1 ){
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e01b      	b.n	8001f8e <sct_led+0x46>

		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value & 1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <sct_led+0x6c>)
 8001f62:	001a      	movs	r2, r3
 8001f64:	2110      	movs	r1, #16
 8001f66:	f001 f924 	bl	80031b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <sct_led+0x6c>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2108      	movs	r1, #8
 8001f70:	0018      	movs	r0, r3
 8001f72:	f001 f91e 	bl	80031b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <sct_led+0x6c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2108      	movs	r1, #8
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f001 f918 	bl	80031b2 <HAL_GPIO_WritePin>
		value >>= 1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < 32; i = i + 1 ){
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b1f      	cmp	r3, #31
 8001f92:	dde0      	ble.n	8001f56 <sct_led+0xe>
	}
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <sct_led+0x6c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	2120      	movs	r1, #32
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f001 f909 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <sct_led+0x6c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f001 f903 	bl	80031b2 <HAL_GPIO_WritePin>


}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b004      	add	sp, #16
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	48000400 	.word	0x48000400

08001fb8 <sct_value>:

void sct_value(uint32_t value, uint8_t led)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	1cfb      	adds	r3, r7, #3
 8001fc4:	701a      	strb	r2, [r3, #0]
	uint32_t reg = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
					0b0000111111110000 << 16,
					//					0b0000111111110000 << 16,
			},

	};
	reg |= reg_values[0][value / 100 % 10];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2164      	movs	r1, #100	; 0x64
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7fe f89a 	bl	8000108 <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	210a      	movs	r1, #10
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7fe f91b 	bl	8000214 <__aeabi_uidivmod>
 8001fde:	000b      	movs	r3, r1
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <sct_value+0x9c>)
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	58d3      	ldr	r3, [r2, r3]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	210a      	movs	r1, #10
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7fe f888 	bl	8000108 <__udivsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	210a      	movs	r1, #10
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7fe f909 	bl	8000214 <__aeabi_uidivmod>
 8002002:	000b      	movs	r3, r1
 8002004:	001a      	movs	r2, r3
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <sct_value+0x9c>)
 8002008:	320a      	adds	r2, #10
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	58d3      	ldr	r3, [r2, r3]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	210a      	movs	r1, #10
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe f8fb 	bl	8000214 <__aeabi_uidivmod>
 800201e:	000b      	movs	r3, r1
 8002020:	001a      	movs	r2, r3
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <sct_value+0x9c>)
 8002024:	3214      	adds	r2, #20
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	58d3      	ldr	r3, [r2, r3]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[3][led];
 8002030:	1cfb      	adds	r3, r7, #3
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <sct_value+0x9c>)
 8002036:	321e      	adds	r2, #30
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	58d3      	ldr	r3, [r2, r3]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]


	sct_led(reg);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff ff7f 	bl	8001f48 <sct_led>

};
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b004      	add	sp, #16
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	0800427c 	.word	0x0800427c

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_MspInit+0x44>)
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_MspInit+0x44>)
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	619a      	str	r2, [r3, #24]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_MspInit+0x44>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_MspInit+0x44>)
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_MspInit+0x44>)
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0549      	lsls	r1, r1, #21
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_MspInit+0x44>)
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	2414      	movs	r4, #20
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	0018      	movs	r0, r3
 80020ae:	2314      	movs	r3, #20
 80020b0:	001a      	movs	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f002 f87e 	bl	80041b4 <memset>
  if(hadc->Instance==ADC1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_ADC_MspInit+0x94>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d133      	bne.n	800212a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_ADC_MspInit+0x98>)
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_ADC_MspInit+0x98>)
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	0089      	lsls	r1, r1, #2
 80020cc:	430a      	orrs	r2, r1
 80020ce:	619a      	str	r2, [r3, #24]
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_ADC_MspInit+0x98>)
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_ADC_MspInit+0x98>)
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_ADC_MspInit+0x98>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0289      	lsls	r1, r1, #10
 80020e8:	430a      	orrs	r2, r1
 80020ea:	615a      	str	r2, [r3, #20]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_ADC_MspInit+0x98>)
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002100:	193b      	adds	r3, r7, r4
 8002102:	2203      	movs	r2, #3
 8002104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	193b      	adds	r3, r7, r4
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	193a      	adds	r2, r7, r4
 800210e:	2390      	movs	r3, #144	; 0x90
 8002110:	05db      	lsls	r3, r3, #23
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 febf 	bl	8002e98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	200c      	movs	r0, #12
 8002120:	f000 fe88 	bl	8002e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002124:	200c      	movs	r0, #12
 8002126:	f000 fe9a 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b00b      	add	sp, #44	; 0x2c
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40012400 	.word	0x40012400
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08b      	sub	sp, #44	; 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	2414      	movs	r4, #20
 8002146:	193b      	adds	r3, r7, r4
 8002148:	0018      	movs	r0, r3
 800214a:	2314      	movs	r3, #20
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f002 f830 	bl	80041b4 <memset>
  if(huart->Instance==USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_UART_MspInit+0x90>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d132      	bne.n	80021c4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_UART_MspInit+0x94>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_UART_MspInit+0x94>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0289      	lsls	r1, r1, #10
 8002168:	430a      	orrs	r2, r1
 800216a:	61da      	str	r2, [r3, #28]
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_UART_MspInit+0x94>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	029b      	lsls	r3, r3, #10
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_UART_MspInit+0x94>)
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_UART_MspInit+0x94>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0289      	lsls	r1, r1, #10
 8002184:	430a      	orrs	r2, r1
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_UART_MspInit+0x94>)
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002196:	0021      	movs	r1, r4
 8002198:	187b      	adds	r3, r7, r1
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2202      	movs	r2, #2
 80021a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2201      	movs	r2, #1
 80021b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	187a      	adds	r2, r7, r1
 80021b8:	2390      	movs	r3, #144	; 0x90
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	0011      	movs	r1, r2
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 fe6a 	bl	8002e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b00b      	add	sp, #44	; 0x2c
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	40004400 	.word	0x40004400
 80021d0:	40021000 	.word	0x40021000

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <NMI_Handler+0x4>

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f888 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <ADC1_IRQHandler+0x14>)
 800220a:	0018      	movs	r0, r3
 800220c:	f000 fa7c 	bl	8002708 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000028 	.word	0x20000028

0800221c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800222a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopForever+0x6>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopForever+0xe>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopForever+0x16>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002252:	f7ff ffe3 	bl	800221c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002256:	f001 ff89 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800225a:	f7ff fbf5 	bl	8001a48 <main>

0800225e <LoopForever>:

LoopForever:
    b LoopForever
 800225e:	e7fe      	b.n	800225e <LoopForever>
  ldr   r0, =_estack
 8002260:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800226c:	0800433c 	.word	0x0800433c
  ldr r2, =_sbss
 8002270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002274:	2000010c 	.word	0x2000010c

08002278 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <DMA1_Channel1_IRQHandler>
	...

0800227c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_Init+0x24>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_Init+0x24>)
 8002286:	2110      	movs	r1, #16
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800228c:	2000      	movs	r0, #0
 800228e:	f000 f809 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002292:	f7ff fee1 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40022000 	.word	0x40022000

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_InitTick+0x5c>)
 80022ae:	681c      	ldr	r4, [r3, #0]
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_InitTick+0x60>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	0019      	movs	r1, r3
 80022b6:	23fa      	movs	r3, #250	; 0xfa
 80022b8:	0098      	lsls	r0, r3, #2
 80022ba:	f7fd ff25 	bl	8000108 <__udivsi3>
 80022be:	0003      	movs	r3, r0
 80022c0:	0019      	movs	r1, r3
 80022c2:	0020      	movs	r0, r4
 80022c4:	f7fd ff20 	bl	8000108 <__udivsi3>
 80022c8:	0003      	movs	r3, r0
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 fdd7 	bl	8002e7e <HAL_SYSTICK_Config>
 80022d0:	1e03      	subs	r3, r0, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e00f      	b.n	80022f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d80b      	bhi.n	80022f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	2301      	movs	r3, #1
 80022e2:	425b      	negs	r3, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fda4 	bl	8002e34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_InitTick+0x64>)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b003      	add	sp, #12
 80022fe:	bd90      	pop	{r4, r7, pc}
 8002300:	20000000 	.word	0x20000000
 8002304:	20000008 	.word	0x20000008
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_IncTick+0x1c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	001a      	movs	r2, r3
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_IncTick+0x20>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	18d2      	adds	r2, r2, r3
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_IncTick+0x20>)
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	20000008 	.word	0x20000008
 800232c:	20000108 	.word	0x20000108

08002330 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <HAL_GetTick+0x10>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000108 	.word	0x20000108

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff fff0 	bl	8002330 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	001a      	movs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	189b      	adds	r3, r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	f7ff ffe0 	bl	8002330 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	230f      	movs	r3, #15
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e125      	b.n	80025f6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2234      	movs	r2, #52	; 0x34
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff fe6c 	bl	80020a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	2210      	movs	r2, #16
 80023ce:	4013      	ands	r3, r2
 80023d0:	d000      	beq.n	80023d4 <HAL_ADC_Init+0x48>
 80023d2:	e103      	b.n	80025dc <HAL_ADC_Init+0x250>
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d000      	beq.n	80023e0 <HAL_ADC_Init+0x54>
 80023de:	e0fd      	b.n	80025dc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80023ea:	d000      	beq.n	80023ee <HAL_ADC_Init+0x62>
 80023ec:	e0f6      	b.n	80025dc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4a83      	ldr	r2, [pc, #524]	; (8002600 <HAL_ADC_Init+0x274>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	2202      	movs	r2, #2
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2203      	movs	r2, #3
 8002406:	4013      	ands	r3, r2
 8002408:	2b01      	cmp	r3, #1
 800240a:	d112      	bne.n	8002432 <HAL_ADC_Init+0xa6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	2b01      	cmp	r3, #1
 8002418:	d009      	beq.n	800242e <HAL_ADC_Init+0xa2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	401a      	ands	r2, r3
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	429a      	cmp	r2, r3
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0xa6>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_ADC_Init+0xa8>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2218      	movs	r2, #24
 8002440:	4393      	bics	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	0899      	lsrs	r1, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4964      	ldr	r1, [pc, #400]	; (8002604 <HAL_ADC_Init+0x278>)
 8002472:	400a      	ands	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e1b      	ldrb	r3, [r3, #24]
 800247a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e5b      	ldrb	r3, [r3, #25]
 8002480:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002482:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e9b      	ldrb	r3, [r3, #26]
 8002488:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800248a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	2b01      	cmp	r3, #1
 8002492:	d002      	beq.n	800249a <HAL_ADC_Init+0x10e>
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	015b      	lsls	r3, r3, #5
 8002498:	e000      	b.n	800249c <HAL_ADC_Init+0x110>
 800249a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800249c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80024a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_Init+0x124>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e000      	b.n	80024b2 <HAL_ADC_Init+0x126>
 80024b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80024b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2124      	movs	r1, #36	; 0x24
 80024b8:	5c5b      	ldrb	r3, [r3, r1]
 80024ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7edb      	ldrb	r3, [r3, #27]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d115      	bne.n	80024f8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e9b      	ldrb	r3, [r3, #26]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	0252      	lsls	r2, r2, #9
 80024da:	4313      	orrs	r3, r2
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	e00b      	b.n	80024f8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	2220      	movs	r2, #32
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	2201      	movs	r2, #1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	23c2      	movs	r3, #194	; 0xc2
 80024fe:	33ff      	adds	r3, #255	; 0xff
 8002500:	429a      	cmp	r2, r3
 8002502:	d007      	beq.n	8002514 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800250c:	4313      	orrs	r3, r2
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	055b      	lsls	r3, r3, #21
 800252c:	429a      	cmp	r2, r3
 800252e:	d01b      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d017      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b02      	cmp	r3, #2
 800253e:	d013      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b03      	cmp	r3, #3
 8002546:	d00f      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	2b04      	cmp	r3, #4
 800254e:	d00b      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2b05      	cmp	r3, #5
 8002556:	d007      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b06      	cmp	r3, #6
 800255e:	d003      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	2b07      	cmp	r3, #7
 8002566:	d112      	bne.n	800258e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2107      	movs	r1, #7
 8002574:	438a      	bics	r2, r1
 8002576:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6959      	ldr	r1, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	2207      	movs	r2, #7
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <HAL_ADC_Init+0x27c>)
 8002596:	4013      	ands	r3, r2
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d10b      	bne.n	80025b6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	2203      	movs	r2, #3
 80025aa:	4393      	bics	r3, r2
 80025ac:	2201      	movs	r2, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025b4:	e01c      	b.n	80025f0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	2212      	movs	r2, #18
 80025bc:	4393      	bics	r3, r2
 80025be:	2210      	movs	r2, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2201      	movs	r2, #1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025da:	e009      	b.n	80025f0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	2210      	movs	r2, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025f0:	230f      	movs	r3, #15
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	781b      	ldrb	r3, [r3, #0]
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	fffffefd 	.word	0xfffffefd
 8002604:	fffe0219 	.word	0xfffe0219
 8002608:	833fffe7 	.word	0x833fffe7

0800260c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002614:	230f      	movs	r3, #15
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d156      	bne.n	80026d6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2234      	movs	r2, #52	; 0x34
 800262c:	5c9b      	ldrb	r3, [r3, r2]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Start_IT+0x2a>
 8002632:	2302      	movs	r3, #2
 8002634:	e056      	b.n	80026e4 <HAL_ADC_Start_IT+0xd8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2234      	movs	r2, #52	; 0x34
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7e5b      	ldrb	r3, [r3, #25]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d007      	beq.n	8002656 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002646:	230f      	movs	r3, #15
 8002648:	18fc      	adds	r4, r7, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fa19 	bl	8002a84 <ADC_Enable>
 8002652:	0003      	movs	r3, r0
 8002654:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002656:	230f      	movs	r3, #15
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d13e      	bne.n	80026de <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_ADC_Start_IT+0xe0>)
 8002666:	4013      	ands	r3, r2
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	0052      	lsls	r2, r2, #1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2234      	movs	r2, #52	; 0x34
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	221c      	movs	r2, #28
 8002686:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d110      	bne.n	80026b2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2104      	movs	r1, #4
 800269c:	438a      	bics	r2, r1
 800269e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2118      	movs	r1, #24
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
          break;
 80026b0:	e008      	b.n	80026c4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	211c      	movs	r1, #28
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
          break;
 80026c2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2104      	movs	r1, #4
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e003      	b.n	80026de <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2202      	movs	r2, #2
 80026dc:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80026de:	230f      	movs	r3, #15
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b005      	add	sp, #20
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	fffff0fe 	.word	0xfffff0fe

080026f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	2b04      	cmp	r3, #4
 800271c:	d106      	bne.n	800272c <HAL_ADC_IRQHandler+0x24>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	4013      	ands	r3, r2
 8002728:	2b04      	cmp	r3, #4
 800272a:	d00d      	beq.n	8002748 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2208      	movs	r2, #8
 8002734:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002736:	2b08      	cmp	r3, #8
 8002738:	d14f      	bne.n	80027da <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	2b08      	cmp	r3, #8
 8002746:	d148      	bne.n	80027da <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	2210      	movs	r2, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d106      	bne.n	8002760 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	23c0      	movs	r3, #192	; 0xc0
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d12d      	bne.n	80027ca <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002772:	2b00      	cmp	r3, #0
 8002774:	d129      	bne.n	80027ca <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2208      	movs	r2, #8
 800277e:	4013      	ands	r3, r2
 8002780:	2b08      	cmp	r3, #8
 8002782:	d122      	bne.n	80027ca <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2204      	movs	r2, #4
 800278c:	4013      	ands	r3, r2
 800278e:	d110      	bne.n	80027b2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	210c      	movs	r1, #12
 800279c:	438a      	bics	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	4a33      	ldr	r2, [pc, #204]	; (8002874 <HAL_ADC_IRQHandler+0x16c>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	2201      	movs	r2, #1
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
 80027b0:	e00b      	b.n	80027ca <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	2220      	movs	r2, #32
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	2201      	movs	r2, #1
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff f8e7 	bl	80019a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	220c      	movs	r2, #12
 80027d8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d115      	bne.n	8002814 <HAL_ADC_IRQHandler+0x10c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b80      	cmp	r3, #128	; 0x80
 80027f4:	d10e      	bne.n	8002814 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	0252      	lsls	r2, r2, #9
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f836 	bl	8002878 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	4013      	ands	r3, r2
 800281e:	2b10      	cmp	r3, #16
 8002820:	d123      	bne.n	800286a <HAL_ADC_IRQHandler+0x162>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2210      	movs	r2, #16
 800282a:	4013      	ands	r3, r2
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11c      	bne.n	800286a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b01      	cmp	r3, #1
 8002836:	d006      	beq.n	8002846 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10d      	bne.n	8002862 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	2202      	movs	r2, #2
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f813 	bl	8002888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	601a      	str	r2, [r3, #0]
  }

}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	fffffefe 	.word	0xfffffefe

08002878 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a2:	230f      	movs	r3, #15
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	055b      	lsls	r3, r3, #21
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d011      	beq.n	80028de <HAL_ADC_ConfigChannel+0x46>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d00d      	beq.n	80028de <HAL_ADC_ConfigChannel+0x46>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d009      	beq.n	80028de <HAL_ADC_ConfigChannel+0x46>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d005      	beq.n	80028de <HAL_ADC_ConfigChannel+0x46>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d001      	beq.n	80028de <HAL_ADC_ConfigChannel+0x46>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2234      	movs	r2, #52	; 0x34
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x54>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0bb      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x1cc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2234      	movs	r2, #52	; 0x34
 80028f0:	2101      	movs	r1, #1
 80028f2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2204      	movs	r2, #4
 80028fc:	4013      	ands	r3, r2
 80028fe:	d000      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x6a>
 8002900:	e09f      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4a59      	ldr	r2, [pc, #356]	; (8002a6c <HAL_ADC_ConfigChannel+0x1d4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_ADC_ConfigChannel+0x76>
 800290c:	e077      	b.n	80029fe <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	055b      	lsls	r3, r3, #21
 800292c:	429a      	cmp	r2, r3
 800292e:	d037      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d033      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2b02      	cmp	r3, #2
 800293e:	d02f      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2b03      	cmp	r3, #3
 8002946:	d02b      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2b04      	cmp	r3, #4
 800294e:	d027      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	2b05      	cmp	r3, #5
 8002956:	d023      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	2b06      	cmp	r3, #6
 800295e:	d01f      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	2b07      	cmp	r3, #7
 8002966:	d01b      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2107      	movs	r1, #7
 8002974:	400b      	ands	r3, r1
 8002976:	429a      	cmp	r2, r3
 8002978:	d012      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2107      	movs	r1, #7
 8002986:	438a      	bics	r2, r1
 8002988:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6959      	ldr	r1, [r3, #20]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2207      	movs	r2, #7
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d003      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x118>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b11      	cmp	r3, #17
 80029ae:	d152      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_ADC_ConfigChannel+0x1d8>)
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d102      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x12a>
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	e001      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x12e>
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	03db      	lsls	r3, r3, #15
 80029c6:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <HAL_ADC_ConfigChannel+0x1d8>)
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d140      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_ADC_ConfigChannel+0x1dc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4927      	ldr	r1, [pc, #156]	; (8002a78 <HAL_ADC_ConfigChannel+0x1e0>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fd fb94 	bl	8000108 <__udivsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	001a      	movs	r2, r3
 80029e4:	0013      	movs	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ee:	e002      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x158>
 80029fc:	e02b      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4099      	lsls	r1, r3
 8002a0c:	000b      	movs	r3, r1
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d003      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x190>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b11      	cmp	r3, #17
 8002a26:	d116      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_ADC_ConfigChannel+0x1d8>)
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1a0>
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_ADC_ConfigChannel+0x1e4>)
 8002a36:	e000      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1a2>
 8002a38:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_ADC_ConfigChannel+0x1d8>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e009      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	2220      	movs	r2, #32
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002a4e:	230f      	movs	r3, #15
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2234      	movs	r2, #52	; 0x34
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	781b      	ldrb	r3, [r3, #0]
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b004      	add	sp, #16
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	00001001 	.word	0x00001001
 8002a70:	40012708 	.word	0x40012708
 8002a74:	20000000 	.word	0x20000000
 8002a78:	000f4240 	.word	0x000f4240
 8002a7c:	ff7fffff 	.word	0xff7fffff
 8002a80:	ffbfffff 	.word	0xffbfffff

08002a84 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d112      	bne.n	8002ac8 <ADC_Enable+0x44>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d009      	beq.n	8002ac4 <ADC_Enable+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	401a      	ands	r2, r3
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d101      	bne.n	8002ac8 <ADC_Enable+0x44>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <ADC_Enable+0x46>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d152      	bne.n	8002b74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <ADC_Enable+0xfc>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	2210      	movs	r2, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2201      	movs	r2, #1
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e03f      	b.n	8002b76 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b06:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <ADC_Enable+0x100>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	491f      	ldr	r1, [pc, #124]	; (8002b88 <ADC_Enable+0x104>)
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fd fafb 	bl	8000108 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b16:	e002      	b.n	8002b1e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b24:	f7ff fc04 	bl	8002330 <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b2c:	e01b      	b.n	8002b66 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2e:	f7ff fbff 	bl	8002330 <HAL_GetTick>
 8002b32:	0002      	movs	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d914      	bls.n	8002b66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d00d      	beq.n	8002b66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	2210      	movs	r2, #16
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e007      	b.n	8002b76 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d1dc      	bne.n	8002b2e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	80000017 	.word	0x80000017
 8002b84:	20000000 	.word	0x20000000
 8002b88:	000f4240 	.word	0x000f4240

08002b8c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b94:	2317      	movs	r3, #23
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2234      	movs	r2, #52	; 0x34
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_Calibration_Start+0x26>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e08d      	b.n	8002cce <HAL_ADCEx_Calibration_Start+0x142>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2234      	movs	r2, #52	; 0x34
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d112      	bne.n	8002bee <HAL_ADCEx_Calibration_Start+0x62>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d009      	beq.n	8002bea <HAL_ADCEx_Calibration_Start+0x5e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	401a      	ands	r2, r3
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d101      	bne.n	8002bee <HAL_ADCEx_Calibration_Start+0x62>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_ADCEx_Calibration_Start+0x64>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d15b      	bne.n	8002cac <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	0609      	lsls	r1, r1, #24
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002c32:	f7ff fb7d 	bl	8002330 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002c3a:	e01d      	b.n	8002c78 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c3c:	f7ff fb78 	bl	8002330 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d916      	bls.n	8002c78 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	0fdb      	lsrs	r3, r3, #31
 8002c52:	07da      	lsls	r2, r3, #31
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10d      	bne.n	8002c78 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2212      	movs	r2, #18
 8002c62:	4393      	bics	r3, r2
 8002c64:	2210      	movs	r2, #16
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2234      	movs	r2, #52	; 0x34
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e02a      	b.n	8002cce <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0fdb      	lsrs	r3, r3, #31
 8002c80:	07da      	lsls	r2, r3, #31
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d0d8      	beq.n	8002c3c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68d9      	ldr	r1, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8002caa:	e009      	b.n	8002cc0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002cb8:	2317      	movs	r3, #23
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2234      	movs	r2, #52	; 0x34
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002cc8:	2317      	movs	r3, #23
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b006      	add	sp, #24
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	fffffefd 	.word	0xfffffefd

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b7f      	cmp	r3, #127	; 0x7f
 8002cee:	d809      	bhi.n	8002d04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf0:	1dfb      	adds	r3, r7, #7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	231f      	movs	r3, #31
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_EnableIRQ+0x30>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4091      	lsls	r1, r2
 8002d00:	000a      	movs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
  }
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	0002      	movs	r2, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b7f      	cmp	r3, #127	; 0x7f
 8002d24:	d828      	bhi.n	8002d78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d26:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <__NVIC_SetPriority+0xd4>)
 8002d28:	1dfb      	adds	r3, r7, #7
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	33c0      	adds	r3, #192	; 0xc0
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	589b      	ldr	r3, [r3, r2]
 8002d36:	1dfa      	adds	r2, r7, #7
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	400a      	ands	r2, r1
 8002d40:	00d2      	lsls	r2, r2, #3
 8002d42:	21ff      	movs	r1, #255	; 0xff
 8002d44:	4091      	lsls	r1, r2
 8002d46:	000a      	movs	r2, r1
 8002d48:	43d2      	mvns	r2, r2
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	401a      	ands	r2, r3
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	4003      	ands	r3, r0
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d64:	481f      	ldr	r0, [pc, #124]	; (8002de4 <__NVIC_SetPriority+0xd4>)
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	33c0      	adds	r3, #192	; 0xc0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d76:	e031      	b.n	8002ddc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <__NVIC_SetPriority+0xd8>)
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	0019      	movs	r1, r3
 8002d80:	230f      	movs	r3, #15
 8002d82:	400b      	ands	r3, r1
 8002d84:	3b08      	subs	r3, #8
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3306      	adds	r3, #6
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	18d3      	adds	r3, r2, r3
 8002d8e:	3304      	adds	r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1dfa      	adds	r2, r7, #7
 8002d94:	7812      	ldrb	r2, [r2, #0]
 8002d96:	0011      	movs	r1, r2
 8002d98:	2203      	movs	r2, #3
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	00d2      	lsls	r2, r2, #3
 8002d9e:	21ff      	movs	r1, #255	; 0xff
 8002da0:	4091      	lsls	r1, r2
 8002da2:	000a      	movs	r2, r1
 8002da4:	43d2      	mvns	r2, r2
 8002da6:	401a      	ands	r2, r3
 8002da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	019b      	lsls	r3, r3, #6
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	401a      	ands	r2, r3
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	0018      	movs	r0, r3
 8002db8:	2303      	movs	r3, #3
 8002dba:	4003      	ands	r3, r0
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <__NVIC_SetPriority+0xd8>)
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	001c      	movs	r4, r3
 8002dc8:	230f      	movs	r3, #15
 8002dca:	4023      	ands	r3, r4
 8002dcc:	3b08      	subs	r3, #8
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	3306      	adds	r3, #6
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	18c3      	adds	r3, r0, r3
 8002dd8:	3304      	adds	r3, #4
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b003      	add	sp, #12
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	1e5a      	subs	r2, r3, #1
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	045b      	lsls	r3, r3, #17
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d301      	bcc.n	8002e04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e00:	2301      	movs	r3, #1
 8002e02:	e010      	b.n	8002e26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <SysTick_Config+0x44>)
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	425b      	negs	r3, r3
 8002e10:	2103      	movs	r1, #3
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff ff7c 	bl	8002d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SysTick_Config+0x44>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <SysTick_Config+0x44>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	210f      	movs	r1, #15
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	1c02      	adds	r2, r0, #0
 8002e44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ff5d 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	0002      	movs	r2, r0
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff33 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff ffaf 	bl	8002dec <SysTick_Config>
 8002e8e:	0003      	movs	r3, r0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e14f      	b.n	8003148 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4091      	lsls	r1, r2
 8002eb2:	000a      	movs	r2, r1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d100      	bne.n	8002ec0 <HAL_GPIO_Init+0x28>
 8002ebe:	e140      	b.n	8003142 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d005      	beq.n	8002ed8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	0013      	movs	r3, r2
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
 8002f14:	0013      	movs	r3, r2
 8002f16:	43da      	mvns	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	2201      	movs	r2, #1
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d017      	beq.n	8002f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	43da      	mvns	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	0013      	movs	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d123      	bne.n	8002fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	58d3      	ldr	r3, [r2, r3]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2207      	movs	r2, #7
 8002f94:	4013      	ands	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2107      	movs	r1, #7
 8002fae:	400b      	ands	r3, r1
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	0013      	movs	r3, r2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	6939      	ldr	r1, [r7, #16]
 8002fc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	0013      	movs	r3, r2
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	401a      	ands	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	23c0      	movs	r3, #192	; 0xc0
 8003004:	029b      	lsls	r3, r3, #10
 8003006:	4013      	ands	r3, r2
 8003008:	d100      	bne.n	800300c <HAL_GPIO_Init+0x174>
 800300a:	e09a      	b.n	8003142 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300c:	4b54      	ldr	r3, [pc, #336]	; (8003160 <HAL_GPIO_Init+0x2c8>)
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_GPIO_Init+0x2c8>)
 8003012:	2101      	movs	r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
 8003018:	4b51      	ldr	r3, [pc, #324]	; (8003160 <HAL_GPIO_Init+0x2c8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2201      	movs	r2, #1
 800301e:	4013      	ands	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003024:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_GPIO_Init+0x2cc>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	589b      	ldr	r3, [r3, r2]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2203      	movs	r2, #3
 8003036:	4013      	ands	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	409a      	lsls	r2, r3
 800303e:	0013      	movs	r3, r2
 8003040:	43da      	mvns	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	2390      	movs	r3, #144	; 0x90
 800304c:	05db      	lsls	r3, r3, #23
 800304e:	429a      	cmp	r2, r3
 8003050:	d013      	beq.n	800307a <HAL_GPIO_Init+0x1e2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a44      	ldr	r2, [pc, #272]	; (8003168 <HAL_GPIO_Init+0x2d0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00d      	beq.n	8003076 <HAL_GPIO_Init+0x1de>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a43      	ldr	r2, [pc, #268]	; (800316c <HAL_GPIO_Init+0x2d4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <HAL_GPIO_Init+0x1da>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a42      	ldr	r2, [pc, #264]	; (8003170 <HAL_GPIO_Init+0x2d8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_GPIO_Init+0x1d6>
 800306a:	2303      	movs	r3, #3
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x1e4>
 800306e:	2305      	movs	r3, #5
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x1e4>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x1e4>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x1e4>
 800307a:	2300      	movs	r3, #0
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	2103      	movs	r1, #3
 8003080:	400a      	ands	r2, r1
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_GPIO_Init+0x2cc>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43da      	mvns	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	4013      	ands	r3, r2
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	4013      	ands	r3, r2
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	035b      	lsls	r3, r3, #13
 8003106:	4013      	ands	r3, r2
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43da      	mvns	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	039b      	lsls	r3, r3, #14
 8003130:	4013      	ands	r3, r2
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_GPIO_Init+0x2dc>)
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	40da      	lsrs	r2, r3
 8003150:	1e13      	subs	r3, r2, #0
 8003152:	d000      	beq.n	8003156 <HAL_GPIO_Init+0x2be>
 8003154:	e6a8      	b.n	8002ea8 <HAL_GPIO_Init+0x10>
  } 
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b006      	add	sp, #24
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	40010000 	.word	0x40010000
 8003168:	48000400 	.word	0x48000400
 800316c:	48000800 	.word	0x48000800
 8003170:	48000c00 	.word	0x48000c00
 8003174:	40010400 	.word	0x40010400

08003178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	000a      	movs	r2, r1
 8003182:	1cbb      	adds	r3, r7, #2
 8003184:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	1cba      	adds	r2, r7, #2
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	4013      	ands	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003192:	230f      	movs	r3, #15
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e003      	b.n	80031a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800319c:	230f      	movs	r3, #15
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
  }
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	0008      	movs	r0, r1
 80031bc:	0011      	movs	r1, r2
 80031be:	1cbb      	adds	r3, r7, #2
 80031c0:	1c02      	adds	r2, r0, #0
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	1c7b      	adds	r3, r7, #1
 80031c6:	1c0a      	adds	r2, r1, #0
 80031c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ca:	1c7b      	adds	r3, r7, #1
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d2:	1cbb      	adds	r3, r7, #2
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031da:	e003      	b.n	80031e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031dc:	1cbb      	adds	r3, r7, #2
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e301      	b.n	8003802 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d100      	bne.n	800320a <HAL_RCC_OscConfig+0x1e>
 8003208:	e08d      	b.n	8003326 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800320a:	4bc3      	ldr	r3, [pc, #780]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	220c      	movs	r2, #12
 8003210:	4013      	ands	r3, r2
 8003212:	2b04      	cmp	r3, #4
 8003214:	d00e      	beq.n	8003234 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003216:	4bc0      	ldr	r3, [pc, #768]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	220c      	movs	r2, #12
 800321c:	4013      	ands	r3, r2
 800321e:	2b08      	cmp	r3, #8
 8003220:	d116      	bne.n	8003250 <HAL_RCC_OscConfig+0x64>
 8003222:	4bbd      	ldr	r3, [pc, #756]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	025b      	lsls	r3, r3, #9
 800322a:	401a      	ands	r2, r3
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	429a      	cmp	r2, r3
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	4bb8      	ldr	r3, [pc, #736]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x56>
 8003240:	e070      	b.n	8003324 <HAL_RCC_OscConfig+0x138>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d000      	beq.n	800324c <HAL_RCC_OscConfig+0x60>
 800324a:	e06b      	b.n	8003324 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e2d8      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x7c>
 8003258:	4baf      	ldr	r3, [pc, #700]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4bae      	ldr	r3, [pc, #696]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	0249      	lsls	r1, r1, #9
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e02f      	b.n	80032c8 <HAL_RCC_OscConfig+0xdc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x9e>
 8003270:	4ba9      	ldr	r3, [pc, #676]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4ba8      	ldr	r3, [pc, #672]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003276:	49a9      	ldr	r1, [pc, #676]	; (800351c <HAL_RCC_OscConfig+0x330>)
 8003278:	400a      	ands	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	4ba6      	ldr	r3, [pc, #664]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4ba5      	ldr	r3, [pc, #660]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003282:	49a7      	ldr	r1, [pc, #668]	; (8003520 <HAL_RCC_OscConfig+0x334>)
 8003284:	400a      	ands	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e01e      	b.n	80032c8 <HAL_RCC_OscConfig+0xdc>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d10e      	bne.n	80032b0 <HAL_RCC_OscConfig+0xc4>
 8003292:	4ba1      	ldr	r3, [pc, #644]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4ba0      	ldr	r3, [pc, #640]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	02c9      	lsls	r1, r1, #11
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	4b9d      	ldr	r3, [pc, #628]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b9c      	ldr	r3, [pc, #624]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	0249      	lsls	r1, r1, #9
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xdc>
 80032b0:	4b99      	ldr	r3, [pc, #612]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b98      	ldr	r3, [pc, #608]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032b6:	4999      	ldr	r1, [pc, #612]	; (800351c <HAL_RCC_OscConfig+0x330>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	4b96      	ldr	r3, [pc, #600]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b95      	ldr	r3, [pc, #596]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032c2:	4997      	ldr	r1, [pc, #604]	; (8003520 <HAL_RCC_OscConfig+0x334>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d014      	beq.n	80032fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff f82e 	bl	8002330 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032da:	f7ff f829 	bl	8002330 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e28a      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ec:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	029b      	lsls	r3, r3, #10
 80032f4:	4013      	ands	r3, r2
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0xee>
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7ff f819 	bl	8002330 <HAL_GetTick>
 80032fe:	0003      	movs	r3, r0
 8003300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff f814 	bl	8002330 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e275      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	4b80      	ldr	r3, [pc, #512]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	4013      	ands	r3, r2
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x118>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d100      	bne.n	8003332 <HAL_RCC_OscConfig+0x146>
 8003330:	e069      	b.n	8003406 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003332:	4b79      	ldr	r3, [pc, #484]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	220c      	movs	r2, #12
 8003338:	4013      	ands	r3, r2
 800333a:	d00b      	beq.n	8003354 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800333c:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	220c      	movs	r2, #12
 8003342:	4013      	ands	r3, r2
 8003344:	2b08      	cmp	r3, #8
 8003346:	d11c      	bne.n	8003382 <HAL_RCC_OscConfig+0x196>
 8003348:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	025b      	lsls	r3, r3, #9
 8003350:	4013      	ands	r3, r2
 8003352:	d116      	bne.n	8003382 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003354:	4b70      	ldr	r3, [pc, #448]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2202      	movs	r2, #2
 800335a:	4013      	ands	r3, r2
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x17e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e24b      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	22f8      	movs	r2, #248	; 0xf8
 8003370:	4393      	bics	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00da      	lsls	r2, r3, #3
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003380:	e041      	b.n	8003406 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d024      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b62      	ldr	r3, [pc, #392]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe ffcb 	bl	8002330 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe ffc6 	bl	8002330 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e227      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d0f1      	beq.n	80033a0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b56      	ldr	r3, [pc, #344]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	22f8      	movs	r2, #248	; 0xf8
 80033c2:	4393      	bics	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00da      	lsls	r2, r3, #3
 80033cc:	4b52      	ldr	r3, [pc, #328]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e018      	b.n	8003406 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe ffa6 	bl	8002330 <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe ffa1 	bl	8002330 <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e202      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d1f1      	bne.n	80033ea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2208      	movs	r2, #8
 800340c:	4013      	ands	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d019      	beq.n	800344c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800341a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800341e:	2101      	movs	r1, #1
 8003420:	430a      	orrs	r2, r1
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fe ff84 	bl	8002330 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342e:	f7fe ff7f 	bl	8002330 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1e0      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2202      	movs	r2, #2
 8003446:	4013      	ands	r3, r2
 8003448:	d0f1      	beq.n	800342e <HAL_RCC_OscConfig+0x242>
 800344a:	e018      	b.n	800347e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344c:	4b32      	ldr	r3, [pc, #200]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800344e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003450:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003452:	2101      	movs	r1, #1
 8003454:	438a      	bics	r2, r1
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003458:	f7fe ff6a 	bl	8002330 <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003462:	f7fe ff65 	bl	8002330 <HAL_GetTick>
 8003466:	0002      	movs	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1c6      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d1f1      	bne.n	8003462 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2204      	movs	r2, #4
 8003484:	4013      	ands	r3, r2
 8003486:	d100      	bne.n	800348a <HAL_RCC_OscConfig+0x29e>
 8003488:	e0b4      	b.n	80035f4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	201f      	movs	r0, #31
 800348c:	183b      	adds	r3, r7, r0
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	055b      	lsls	r3, r3, #21
 800349a:	4013      	ands	r3, r2
 800349c:	d110      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	0549      	lsls	r1, r1, #21
 80034a8:	430a      	orrs	r2, r1
 80034aa:	61da      	str	r2, [r3, #28]
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	055b      	lsls	r3, r3, #21
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d11a      	bne.n	8003502 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	0049      	lsls	r1, r1, #1
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fe ff29 	bl	8002330 <HAL_GetTick>
 80034de:	0003      	movs	r3, r0
 80034e0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fe ff24 	bl	8002330 <HAL_GetTick>
 80034e8:	0002      	movs	r2, r0
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e185      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4013      	ands	r3, r2
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10e      	bne.n	8003528 <HAL_RCC_OscConfig+0x33c>
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	4b02      	ldr	r3, [pc, #8]	; (8003518 <HAL_RCC_OscConfig+0x32c>)
 8003510:	2101      	movs	r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	621a      	str	r2, [r3, #32]
 8003516:	e035      	b.n	8003584 <HAL_RCC_OscConfig+0x398>
 8003518:	40021000 	.word	0x40021000
 800351c:	fffeffff 	.word	0xfffeffff
 8003520:	fffbffff 	.word	0xfffbffff
 8003524:	40007000 	.word	0x40007000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10c      	bne.n	800354a <HAL_RCC_OscConfig+0x35e>
 8003530:	4bb6      	ldr	r3, [pc, #728]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003532:	6a1a      	ldr	r2, [r3, #32]
 8003534:	4bb5      	ldr	r3, [pc, #724]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003536:	2101      	movs	r1, #1
 8003538:	438a      	bics	r2, r1
 800353a:	621a      	str	r2, [r3, #32]
 800353c:	4bb3      	ldr	r3, [pc, #716]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	4bb2      	ldr	r3, [pc, #712]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003542:	2104      	movs	r1, #4
 8003544:	438a      	bics	r2, r1
 8003546:	621a      	str	r2, [r3, #32]
 8003548:	e01c      	b.n	8003584 <HAL_RCC_OscConfig+0x398>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x380>
 8003552:	4bae      	ldr	r3, [pc, #696]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	4bad      	ldr	r3, [pc, #692]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003558:	2104      	movs	r1, #4
 800355a:	430a      	orrs	r2, r1
 800355c:	621a      	str	r2, [r3, #32]
 800355e:	4bab      	ldr	r3, [pc, #684]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	4baa      	ldr	r3, [pc, #680]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	621a      	str	r2, [r3, #32]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0x398>
 800356c:	4ba7      	ldr	r3, [pc, #668]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	4ba6      	ldr	r3, [pc, #664]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003572:	2101      	movs	r1, #1
 8003574:	438a      	bics	r2, r1
 8003576:	621a      	str	r2, [r3, #32]
 8003578:	4ba4      	ldr	r3, [pc, #656]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	4ba3      	ldr	r3, [pc, #652]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800357e:	2104      	movs	r1, #4
 8003580:	438a      	bics	r2, r1
 8003582:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d014      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe fed0 	bl	8002330 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003594:	e009      	b.n	80035aa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe fecb 	bl	8002330 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	4a9b      	ldr	r2, [pc, #620]	; (8003810 <HAL_RCC_OscConfig+0x624>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e12b      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	4b98      	ldr	r3, [pc, #608]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	2202      	movs	r2, #2
 80035b0:	4013      	ands	r3, r2
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x3aa>
 80035b4:	e013      	b.n	80035de <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe febb 	bl	8002330 <HAL_GetTick>
 80035ba:	0003      	movs	r3, r0
 80035bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	e009      	b.n	80035d4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe feb6 	bl	8002330 <HAL_GetTick>
 80035c4:	0002      	movs	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	4a91      	ldr	r2, [pc, #580]	; (8003810 <HAL_RCC_OscConfig+0x624>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e116      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d4:	4b8d      	ldr	r3, [pc, #564]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	2202      	movs	r2, #2
 80035da:	4013      	ands	r3, r2
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035de:	231f      	movs	r3, #31
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e8:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	4b87      	ldr	r3, [pc, #540]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80035ee:	4989      	ldr	r1, [pc, #548]	; (8003814 <HAL_RCC_OscConfig+0x628>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2210      	movs	r2, #16
 80035fa:	4013      	ands	r3, r2
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d12a      	bne.n	800365c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003606:	4b81      	ldr	r3, [pc, #516]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360a:	4b80      	ldr	r3, [pc, #512]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800360c:	2104      	movs	r1, #4
 800360e:	430a      	orrs	r2, r1
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003612:	4b7e      	ldr	r3, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003616:	4b7d      	ldr	r3, [pc, #500]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003618:	2101      	movs	r1, #1
 800361a:	430a      	orrs	r2, r1
 800361c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fe87 	bl	8002330 <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003628:	f7fe fe82 	bl	8002330 <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0e3      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800363a:	4b74      	ldr	r3, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d0f1      	beq.n	8003628 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003644:	4b71      	ldr	r3, [pc, #452]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	22f8      	movs	r2, #248	; 0xf8
 800364a:	4393      	bics	r3, r2
 800364c:	0019      	movs	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	00da      	lsls	r2, r3, #3
 8003654:	4b6d      	ldr	r3, [pc, #436]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003656:	430a      	orrs	r2, r1
 8003658:	635a      	str	r2, [r3, #52]	; 0x34
 800365a:	e034      	b.n	80036c6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	3305      	adds	r3, #5
 8003662:	d111      	bne.n	8003688 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003664:	4b69      	ldr	r3, [pc, #420]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003668:	4b68      	ldr	r3, [pc, #416]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800366a:	2104      	movs	r1, #4
 800366c:	438a      	bics	r2, r1
 800366e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	22f8      	movs	r2, #248	; 0xf8
 8003676:	4393      	bics	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	00da      	lsls	r2, r3, #3
 8003680:	4b62      	ldr	r3, [pc, #392]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003682:	430a      	orrs	r2, r1
 8003684:	635a      	str	r2, [r3, #52]	; 0x34
 8003686:	e01e      	b.n	80036c6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003688:	4b60      	ldr	r3, [pc, #384]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800368a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368c:	4b5f      	ldr	r3, [pc, #380]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800368e:	2104      	movs	r1, #4
 8003690:	430a      	orrs	r2, r1
 8003692:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003694:	4b5d      	ldr	r3, [pc, #372]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003698:	4b5c      	ldr	r3, [pc, #368]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800369a:	2101      	movs	r1, #1
 800369c:	438a      	bics	r2, r1
 800369e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe fe46 	bl	8002330 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036aa:	f7fe fe41 	bl	8002330 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e0a2      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	2202      	movs	r2, #2
 80036c2:	4013      	ands	r3, r2
 80036c4:	d1f1      	bne.n	80036aa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <HAL_RCC_OscConfig+0x4e4>
 80036ce:	e097      	b.n	8003800 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	220c      	movs	r2, #12
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d100      	bne.n	80036de <HAL_RCC_OscConfig+0x4f2>
 80036dc:	e06b      	b.n	80037b6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d14c      	bne.n	8003780 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b48      	ldr	r3, [pc, #288]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80036ec:	494a      	ldr	r1, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x62c>)
 80036ee:	400a      	ands	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fe1d 	bl	8002330 <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe fe18 	bl	8002330 <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e079      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	049b      	lsls	r3, r3, #18
 8003716:	4013      	ands	r3, r2
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371a:	4b3c      	ldr	r3, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	220f      	movs	r2, #15
 8003720:	4393      	bics	r3, r2
 8003722:	0019      	movs	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <HAL_RCC_OscConfig+0x630>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	431a      	orrs	r2, r3
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003748:	4b30      	ldr	r3, [pc, #192]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b2f      	ldr	r3, [pc, #188]	; (800380c <HAL_RCC_OscConfig+0x620>)
 800374e:	2180      	movs	r1, #128	; 0x80
 8003750:	0449      	lsls	r1, r1, #17
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fdeb 	bl	8002330 <HAL_GetTick>
 800375a:	0003      	movs	r3, r0
 800375c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe fde6 	bl	8002330 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e047      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003772:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	049b      	lsls	r3, r3, #18
 800377a:	4013      	ands	r3, r2
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x574>
 800377e:	e03f      	b.n	8003800 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_RCC_OscConfig+0x620>)
 8003786:	4924      	ldr	r1, [pc, #144]	; (8003818 <HAL_RCC_OscConfig+0x62c>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fdd0 	bl	8002330 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe fdcb 	bl	8002330 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e02c      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	049b      	lsls	r3, r3, #18
 80037b0:	4013      	ands	r3, r2
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x5aa>
 80037b4:	e024      	b.n	8003800 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e01f      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x620>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	025b      	lsls	r3, r3, #9
 80037d4:	401a      	ands	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10e      	bne.n	80037fc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	220f      	movs	r2, #15
 80037e2:	401a      	ands	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	23f0      	movs	r3, #240	; 0xf0
 80037f0:	039b      	lsls	r3, r3, #14
 80037f2:	401a      	ands	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b008      	add	sp, #32
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	40021000 	.word	0x40021000
 8003810:	00001388 	.word	0x00001388
 8003814:	efffffff 	.word	0xefffffff
 8003818:	feffffff 	.word	0xfeffffff
 800381c:	ffc2ffff 	.word	0xffc2ffff

08003820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b3      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b5b      	ldr	r3, [pc, #364]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d911      	bls.n	8003866 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2201      	movs	r2, #1
 8003848:	4393      	bics	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e09a      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	d015      	beq.n	800389c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2204      	movs	r2, #4
 8003876:	4013      	ands	r3, r2
 8003878:	d006      	beq.n	8003888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800387a:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 8003880:	21e0      	movs	r1, #224	; 0xe0
 8003882:	00c9      	lsls	r1, r1, #3
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	22f0      	movs	r2, #240	; 0xf0
 800388e:	4393      	bics	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	029b      	lsls	r3, r3, #10
 80038b6:	4013      	ands	r3, r2
 80038b8:	d114      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06e      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	049b      	lsls	r3, r3, #18
 80038ce:	4013      	ands	r3, r2
 80038d0:	d108      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e062      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2202      	movs	r2, #2
 80038dc:	4013      	ands	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e05b      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e4:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2203      	movs	r2, #3
 80038ea:	4393      	bics	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fe fd1a 	bl	8002330 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003900:	e009      	b.n	8003916 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003902:	f7fe fd15 	bl	8002330 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <HAL_RCC_ClockConfig+0x18c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e042      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	220c      	movs	r2, #12
 800391c:	401a      	ands	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1ec      	bne.n	8003902 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d211      	bcs.n	800395a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	4393      	bics	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_RCC_ClockConfig+0x184>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e020      	b.n	800399c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2204      	movs	r2, #4
 8003960:	4013      	ands	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4a11      	ldr	r2, [pc, #68]	; (80039b0 <HAL_RCC_ClockConfig+0x190>)
 800396a:	4013      	ands	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003978:	f000 f820 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397c:	0001      	movs	r1, r0
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x188>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	220f      	movs	r2, #15
 8003986:	4013      	ands	r3, r2
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x194>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	000a      	movs	r2, r1
 800398e:	40da      	lsrs	r2, r3
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x198>)
 8003992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fe fc85 	bl	80022a4 <HAL_InitTick>
  
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40022000 	.word	0x40022000
 80039a8:	40021000 	.word	0x40021000
 80039ac:	00001388 	.word	0x00001388
 80039b0:	fffff8ff 	.word	0xfffff8ff
 80039b4:	0800431c 	.word	0x0800431c
 80039b8:	20000000 	.word	0x20000000

080039bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b08f      	sub	sp, #60	; 0x3c
 80039c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80039c2:	2314      	movs	r3, #20
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80039ca:	c313      	stmia	r3!, {r0, r1, r4}
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	4a29      	ldr	r2, [pc, #164]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80039d6:	c313      	stmia	r3!, {r0, r1, r4}
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e0:	2300      	movs	r3, #0
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e4:	2300      	movs	r3, #0
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	220c      	movs	r2, #12
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d002      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x4a>
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d003      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x50>
 8003a04:	e02d      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a0a:	e02d      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	220f      	movs	r2, #15
 8003a12:	4013      	ands	r3, r2
 8003a14:	2214      	movs	r2, #20
 8003a16:	18ba      	adds	r2, r7, r2
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	220f      	movs	r2, #15
 8003a22:	4013      	ands	r3, r2
 8003a24:	1d3a      	adds	r2, r7, #4
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	4013      	ands	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a36:	4812      	ldr	r0, [pc, #72]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a38:	f7fc fb66 	bl	8000108 <__udivsi3>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	001a      	movs	r2, r3
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	4353      	muls	r3, r2
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
 8003a46:	e009      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a4a:	000a      	movs	r2, r1
 8003a4c:	0152      	lsls	r2, r2, #5
 8003a4e:	1a52      	subs	r2, r2, r1
 8003a50:	0193      	lsls	r3, r2, #6
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	185b      	adds	r3, r3, r1
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a60:	e002      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b00f      	add	sp, #60	; 0x3c
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	080041dc 	.word	0x080041dc
 8003a78:	080041ec 	.word	0x080041ec
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	007a1200 	.word	0x007a1200

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b02      	ldr	r3, [pc, #8]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a9c:	f7ff fff2 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa0:	0001      	movs	r1, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	4013      	ands	r3, r2
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	40d9      	lsrs	r1, r3
 8003ab2:	000b      	movs	r3, r1
}    
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	0800432c 	.word	0x0800432c

08003ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e044      	b.n	8003b60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d107      	bne.n	8003aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2274      	movs	r2, #116	; 0x74
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7fe fb27 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2224      	movs	r2, #36	; 0x24
 8003af2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	438a      	bics	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f830 	bl	8003b6c <UART_SetConfig>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e024      	b.n	8003b60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f963 	bl	8003dec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	490d      	ldr	r1, [pc, #52]	; (8003b68 <HAL_UART_Init+0xa4>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2108      	movs	r1, #8
 8003b42:	438a      	bics	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2101      	movs	r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 f9fb 	bl	8003f54 <UART_CheckIdleState>
 8003b5e:	0003      	movs	r3, r0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	fffff7ff 	.word	0xfffff7ff

08003b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b74:	231e      	movs	r3, #30
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a8d      	ldr	r2, [pc, #564]	; (8003dd0 <UART_SetConfig+0x264>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a88      	ldr	r2, [pc, #544]	; (8003dd4 <UART_SetConfig+0x268>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a7f      	ldr	r2, [pc, #508]	; (8003dd8 <UART_SetConfig+0x26c>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a7b      	ldr	r2, [pc, #492]	; (8003ddc <UART_SetConfig+0x270>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d127      	bne.n	8003c42 <UART_SetConfig+0xd6>
 8003bf2:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <UART_SetConfig+0x274>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d00d      	beq.n	8003c1a <UART_SetConfig+0xae>
 8003bfe:	d81b      	bhi.n	8003c38 <UART_SetConfig+0xcc>
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d014      	beq.n	8003c2e <UART_SetConfig+0xc2>
 8003c04:	d818      	bhi.n	8003c38 <UART_SetConfig+0xcc>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <UART_SetConfig+0xa4>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d00a      	beq.n	8003c24 <UART_SetConfig+0xb8>
 8003c0e:	e013      	b.n	8003c38 <UART_SetConfig+0xcc>
 8003c10:	231f      	movs	r3, #31
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e021      	b.n	8003c5e <UART_SetConfig+0xf2>
 8003c1a:	231f      	movs	r3, #31
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e01c      	b.n	8003c5e <UART_SetConfig+0xf2>
 8003c24:	231f      	movs	r3, #31
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2204      	movs	r2, #4
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e017      	b.n	8003c5e <UART_SetConfig+0xf2>
 8003c2e:	231f      	movs	r3, #31
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	2208      	movs	r2, #8
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e012      	b.n	8003c5e <UART_SetConfig+0xf2>
 8003c38:	231f      	movs	r3, #31
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e00d      	b.n	8003c5e <UART_SetConfig+0xf2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a67      	ldr	r2, [pc, #412]	; (8003de4 <UART_SetConfig+0x278>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d104      	bne.n	8003c56 <UART_SetConfig+0xea>
 8003c4c:	231f      	movs	r3, #31
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e003      	b.n	8003c5e <UART_SetConfig+0xf2>
 8003c56:	231f      	movs	r3, #31
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d15d      	bne.n	8003d26 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003c6a:	231f      	movs	r3, #31
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d015      	beq.n	8003ca0 <UART_SetConfig+0x134>
 8003c74:	dc18      	bgt.n	8003ca8 <UART_SetConfig+0x13c>
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d00d      	beq.n	8003c96 <UART_SetConfig+0x12a>
 8003c7a:	dc15      	bgt.n	8003ca8 <UART_SetConfig+0x13c>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <UART_SetConfig+0x11a>
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d005      	beq.n	8003c90 <UART_SetConfig+0x124>
 8003c84:	e010      	b.n	8003ca8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c86:	f7ff ff07 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	61bb      	str	r3, [r7, #24]
        break;
 8003c8e:	e012      	b.n	8003cb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b55      	ldr	r3, [pc, #340]	; (8003de8 <UART_SetConfig+0x27c>)
 8003c92:	61bb      	str	r3, [r7, #24]
        break;
 8003c94:	e00f      	b.n	8003cb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7ff fe91 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	61bb      	str	r3, [r7, #24]
        break;
 8003c9e:	e00a      	b.n	8003cb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	61bb      	str	r3, [r7, #24]
        break;
 8003ca6:	e006      	b.n	8003cb6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cac:	231e      	movs	r3, #30
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
        break;
 8003cb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d100      	bne.n	8003cbe <UART_SetConfig+0x152>
 8003cbc:	e07b      	b.n	8003db6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	005a      	lsls	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	18d2      	adds	r2, r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0019      	movs	r1, r3
 8003cd0:	0010      	movs	r0, r2
 8003cd2:	f7fc fa19 	bl	8000108 <__udivsi3>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d91c      	bls.n	8003d1c <UART_SetConfig+0x1b0>
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	025b      	lsls	r3, r3, #9
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d217      	bcs.n	8003d1c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	200e      	movs	r0, #14
 8003cf2:	183b      	adds	r3, r7, r0
 8003cf4:	210f      	movs	r1, #15
 8003cf6:	438a      	bics	r2, r1
 8003cf8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2207      	movs	r2, #7
 8003d02:	4013      	ands	r3, r2
 8003d04:	b299      	uxth	r1, r3
 8003d06:	183b      	adds	r3, r7, r0
 8003d08:	183a      	adds	r2, r7, r0
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	183a      	adds	r2, r7, r0
 8003d16:	8812      	ldrh	r2, [r2, #0]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e04c      	b.n	8003db6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1c:	231e      	movs	r3, #30
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e047      	b.n	8003db6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d26:	231f      	movs	r3, #31
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d015      	beq.n	8003d5c <UART_SetConfig+0x1f0>
 8003d30:	dc18      	bgt.n	8003d64 <UART_SetConfig+0x1f8>
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d00d      	beq.n	8003d52 <UART_SetConfig+0x1e6>
 8003d36:	dc15      	bgt.n	8003d64 <UART_SetConfig+0x1f8>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <UART_SetConfig+0x1d6>
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d005      	beq.n	8003d4c <UART_SetConfig+0x1e0>
 8003d40:	e010      	b.n	8003d64 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7ff fea9 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8003d46:	0003      	movs	r3, r0
 8003d48:	61bb      	str	r3, [r7, #24]
        break;
 8003d4a:	e012      	b.n	8003d72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <UART_SetConfig+0x27c>)
 8003d4e:	61bb      	str	r3, [r7, #24]
        break;
 8003d50:	e00f      	b.n	8003d72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7ff fe33 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8003d56:	0003      	movs	r3, r0
 8003d58:	61bb      	str	r3, [r7, #24]
        break;
 8003d5a:	e00a      	b.n	8003d72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	61bb      	str	r3, [r7, #24]
        break;
 8003d62:	e006      	b.n	8003d72 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d68:	231e      	movs	r3, #30
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
        break;
 8003d70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01e      	beq.n	8003db6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	085a      	lsrs	r2, r3, #1
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	18d2      	adds	r2, r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	0019      	movs	r1, r3
 8003d88:	0010      	movs	r0, r2
 8003d8a:	f7fc f9bd 	bl	8000108 <__udivsi3>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b0f      	cmp	r3, #15
 8003d98:	d909      	bls.n	8003dae <UART_SetConfig+0x242>
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	025b      	lsls	r3, r3, #9
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d204      	bcs.n	8003dae <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	e003      	b.n	8003db6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003dae:	231e      	movs	r3, #30
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dc2:	231e      	movs	r3, #30
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	781b      	ldrb	r3, [r3, #0]
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b008      	add	sp, #32
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	ffff69f3 	.word	0xffff69f3
 8003dd4:	ffffcfff 	.word	0xffffcfff
 8003dd8:	fffff4ff 	.word	0xfffff4ff
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40004400 	.word	0x40004400
 8003de8:	007a1200 	.word	0x007a1200

08003dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d00b      	beq.n	8003e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <UART_AdvFeatureConfig+0x144>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4a43      	ldr	r2, [pc, #268]	; (8003f34 <UART_AdvFeatureConfig+0x148>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d00b      	beq.n	8003e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <UART_AdvFeatureConfig+0x14c>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2208      	movs	r2, #8
 8003e60:	4013      	ands	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <UART_AdvFeatureConfig+0x150>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2210      	movs	r2, #16
 8003e82:	4013      	ands	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <UART_AdvFeatureConfig+0x154>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <UART_AdvFeatureConfig+0x158>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	2240      	movs	r2, #64	; 0x40
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d01d      	beq.n	8003f06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <UART_AdvFeatureConfig+0x15c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	035b      	lsls	r3, r3, #13
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d10b      	bne.n	8003f06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <UART_AdvFeatureConfig+0x160>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	0019      	movs	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <UART_AdvFeatureConfig+0x164>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	fffdffff 	.word	0xfffdffff
 8003f34:	fffeffff 	.word	0xfffeffff
 8003f38:	fffbffff 	.word	0xfffbffff
 8003f3c:	ffff7fff 	.word	0xffff7fff
 8003f40:	ffffefff 	.word	0xffffefff
 8003f44:	ffffdfff 	.word	0xffffdfff
 8003f48:	ffefffff 	.word	0xffefffff
 8003f4c:	ff9fffff 	.word	0xff9fffff
 8003f50:	fff7ffff 	.word	0xfff7ffff

08003f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	2100      	movs	r1, #0
 8003f62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f64:	f7fe f9e4 	bl	8002330 <HAL_GetTick>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2208      	movs	r2, #8
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d10c      	bne.n	8003f94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	0391      	lsls	r1, r2, #14
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <UART_CheckIdleState+0x8c>)
 8003f84:	9200      	str	r2, [sp, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f000 f82c 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003f8c:	1e03      	subs	r3, r0, #0
 8003f8e:	d001      	beq.n	8003f94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e021      	b.n	8003fd8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d10c      	bne.n	8003fbc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	03d1      	lsls	r1, r2, #15
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <UART_CheckIdleState+0x8c>)
 8003fac:	9200      	str	r2, [sp, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f000 f818 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d001      	beq.n	8003fbc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e00d      	b.n	8003fd8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2274      	movs	r2, #116	; 0x74
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b004      	add	sp, #16
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	01ffffff 	.word	0x01ffffff

08003fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b094      	sub	sp, #80	; 0x50
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	1dfb      	adds	r3, r7, #7
 8003ff2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	e0a3      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	d100      	bne.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ffc:	e09f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe f997 	bl	8002330 <HAL_GetTick>
 8004002:	0002      	movs	r2, r0
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <UART_WaitOnFlagUntilTimeout+0x30>
 800400e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13d      	bne.n	8004090 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004014:	f3ef 8310 	mrs	r3, PRIMASK
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401c:	647b      	str	r3, [r7, #68]	; 0x44
 800401e:	2301      	movs	r3, #1
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	494c      	ldr	r1, [pc, #304]	; (8004168 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004036:	400a      	ands	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	f383 8810 	msr	PRIMASK, r3
}
 8004044:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
 8004050:	2301      	movs	r3, #1
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2101      	movs	r1, #1
 8004068:	438a      	bics	r2, r1
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2274      	movs	r2, #116	; 0x74
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e067      	b.n	8004160 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2204      	movs	r2, #4
 8004098:	4013      	ands	r3, r2
 800409a:	d050      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	401a      	ands	r2, r3
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d146      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	613b      	str	r3, [r7, #16]
  return(result);
 80040c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c4:	2301      	movs	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4923      	ldr	r1, [pc, #140]	; (8004168 <UART_WaitOnFlagUntilTimeout+0x184>)
 80040dc:	400a      	ands	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ec:	f3ef 8310 	mrs	r3, PRIMASK
 80040f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80040f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f6:	2301      	movs	r3, #1
 80040f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f383 8810 	msr	PRIMASK, r3
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	438a      	bics	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	f383 8810 	msr	PRIMASK, r3
}
 800411c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2280      	movs	r2, #128	; 0x80
 800412e:	2120      	movs	r1, #32
 8004130:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2274      	movs	r2, #116	; 0x74
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e010      	b.n	8004160 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	425a      	negs	r2, r3
 800414e:	4153      	adcs	r3, r2
 8004150:	b2db      	uxtb	r3, r3
 8004152:	001a      	movs	r2, r3
 8004154:	1dfb      	adds	r3, r7, #7
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d100      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x17a>
 800415c:	e74b      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	b014      	add	sp, #80	; 0x50
 8004166:	bd80      	pop	{r7, pc}
 8004168:	fffffe5f 	.word	0xfffffe5f

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	; (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	2600      	movs	r6, #0
 800417e:	f000 f821 	bl	80041c4 <_init>
 8004182:	4d0a      	ldr	r5, [pc, #40]	; (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	; (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	00b3      	lsls	r3, r6, #2
 8004192:	58eb      	ldr	r3, [r5, r3]
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	00b3      	lsls	r3, r6, #2
 800419c:	58eb      	ldr	r3, [r5, r3]
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	08004334 	.word	0x08004334
 80041a8:	08004334 	.word	0x08004334
 80041ac:	08004334 	.word	0x08004334
 80041b0:	08004338 	.word	0x08004338

080041b4 <memset>:
 80041b4:	0003      	movs	r3, r0
 80041b6:	1882      	adds	r2, r0, r2
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	7019      	strb	r1, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
